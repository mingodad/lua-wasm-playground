; repository: https://github.com/tree-sitter/tree-sitter-css.git
; commit: a68fcd1e6b03118d1e92ffa45e7ab7a39d52d3f7
; json from: tree-sitter-css/src/grammar.json
; From /tmp/tslua/css0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	_descendant_operator
	_pseudo_class_selector_colon
	__error_recovery
	}

extras ::= {
	/\s/
	comment
	js_comment
	}

inline ::= {
	_top_level_item
	_block_item
	}

rules:

  stylesheet ::= _top_level_item*

  _top_level_item ::= declaration
	| rule_set
	| import_statement
	| media_statement
	| charset_statement
	| namespace_statement
	| keyframes_statement
	| supports_statement
	| at_rule

  import_statement ::= '@import' _value ( _query ( ',' _query )* )? ';'

  media_statement ::= '@media' _query ( ',' _query )* block

  charset_statement ::= '@charset' _value ';'

  namespace_statement ::= '@namespace' ( identifier -> namespace_name )? ( string_value | call_expression ) ';'

  keyframes_statement ::= ( '@keyframes' | /@[-a-z]+keyframes/ -> at_keyword ) identifier -> keyframes_name keyframe_block_list

  keyframe_block_list ::= '{' keyframe_block* '}'

  keyframe_block ::= ( from | to | integer_value ) block

  from ::= 'from'

  to ::= 'to'

  supports_statement ::= '@supports' _query block

  postcss_statement ::=  -1(  at_keyword _value* ';' ) 

  at_rule ::= at_keyword ( _query ( ',' _query )* )? ( ';' | block )

  rule_set ::= selectors block

  selectors ::= _selector ( ',' _selector )*

  block ::= '{' _block_item* ( last_declaration -> declaration )? '}'

  _block_item ::= declaration
	| rule_set
	| import_statement
	| media_statement
	| charset_statement
	| namespace_statement
	| keyframes_statement
	| supports_statement
	| postcss_statement
	| at_rule

  _selector ::= universal_selector
	| identifier -> tag_name
	| class_selector
	| nesting_selector
	| pseudo_class_selector
	| pseudo_element_selector
	| id_selector
	| attribute_selector
	| string_value
	| child_selector
	| descendant_selector
	| sibling_selector
	| adjacent_sibling_selector
	| namespace_selector

  nesting_selector ::= '&'

  universal_selector ::= '*'

  class_selector ::=  1(  _selector? '.' identifier -> class_name ) 

  pseudo_class_selector ::= _selector? _pseudo_class_selector_colon -> ":" ( ( 'has' | 'not' | 'is' | 'where' ) -> class_name pseudo_class_with_selector_arguments -> arguments | identifier -> class_name ( pseudo_class_arguments -> arguments )? )

  pseudo_element_selector ::= _selector? '::' identifier -> tag_name ( pseudo_element_arguments -> arguments )?

  id_selector ::= _selector? '#' identifier -> id_name

  attribute_selector ::= _selector? '[' ( identifier | namespace_selector ) -> attribute_name ( ( '=' | '~=' | '^=' | '|=' | '*=' | '$=' ) _value )? ']'

  child_selector ::=  <0(  _selector '>' _selector ) 

  descendant_selector ::=  <0(  _selector _descendant_operator _selector ) 

  sibling_selector ::=  <0(  _selector '~' _selector ) 

  adjacent_sibling_selector ::=  <0(  _selector '+' _selector ) 

  namespace_selector ::=  <0(  _selector '|' _selector ) 

  pseudo_class_arguments ::= !( '(' ) ( ( _selector | _value+ ) ( ',' ( _selector | _value+ ) )* )? ')'

  pseudo_class_with_selector_arguments ::= !( '(' ) ( _selector ( ',' _selector )* )? ')'

  pseudo_element_arguments ::= !( '(' ) ( ( _selector | _value+ ) ( ',' ( _selector | _value+ ) )* )? ')'

  declaration ::= identifier -> property_name ':' _value ( ','? _value )* important? ';'

  last_declaration ::=  1(  identifier -> property_name ':' _value ( ','? _value )* important? ) 

  important ::= '!important'

  _query ::= identifier -> keyword_query
	| feature_query
	| binary_query
	| unary_query
	| selector_query
	| parenthesized_query

  feature_query ::= '(' identifier -> feature_name ':' _value+ ')'

  parenthesized_query ::= '(' _query ')'

  binary_query ::=  <0(  _query ( 'and' | 'or' ) _query ) 

  unary_query ::=  1(  ( 'not' | 'only' ) _query ) 

  selector_query ::= 'selector' '(' _selector ')'

  _value ::=  -1(  identifier -> plain_value | plain_value | color_value | integer_value | float_value | string_value | grid_value | binary_expression | parenthesized_value | call_expression | important ) 

  parenthesized_value ::= '(' _value ')'

  color_value ::= '#' !( /[0-9a-fA-F]{3,8}/ )

  string_value ::= "'" /([^'\n]|\\(.|\n))*/ "'"
	| '"' /([^"\n]|\\(.|\n))*/ '"'

  integer_value ::= @( ( '+' | '-' )? /\d+/ ) unit?

  float_value ::= @( ( '+' | '-' )? /\d*/ ( '.' /\d+/ | /[eE]/ '-'? /\d+/ | '.' /\d+/ /[eE]/ '-'? /\d+/ ) ) unit?

  unit ::= !( /[a-zA-Z%]+/ )

  grid_value ::= '[' _value ( ',' _value )* ']'

  call_expression ::= identifier -> function_name arguments

  binary_expression ::=  <0(  _value ( '+' | '-' | '*' | '/' ) _value ) 

  arguments ::= !( '(' ) ( _value+ ( ( ',' | ';' ) _value+ )* )? ')'

  identifier ::= /(--|-?[a-zA-Z_\xA0-\xFF])[a-zA-Z0-9-_\xA0-\xFF]*/

  at_keyword ::= /@[a-zA-Z-_]+/

  js_comment ::= @(  -1(  '//' /.*/ )  )

  comment ::= @( '/*' /[^*]*\*+([^/*][^*]*\*+)*/ '/' )

  plain_value ::= @( ( /[-_]/ | /\/[^\*\s,;!{}()\[\]]/ )* /[a-zA-Z]/ ( /[^/\s,;!{}()\[\]]/ | /\/[^\*\s,;!{}()\[\]]/ )* )

