; From tree-sitter-ocaml/grammars/ocaml/src/grammar.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html

;*** maybe you'll need to search and replace this (:[a-zA-Z_]+)([?*+]) => $2$1


externals ::= {
	comment
	_left_quoted_string_delimiter
	_right_quoted_string_delimiter
	undefined
	line_number_directive
	_null
	}

extras ::= {
	/\s/
	comment
	line_number_directive
	attribute
	}

supertypes ::= {
	_structure_item
	_signature_item
	_parameter
	_module_type
	_simple_module_expression
	_module_expression
	_simple_class_type
	_class_type
	_class_field_specification
	_simple_class_expression
	_class_expression
	_class_field
	_polymorphic_type
	_simple_type
	_tuple_type
	_type
	_simple_expression
	_expression
	_sequence_expression
	_simple_pattern
	_pattern
	_binding_pattern
	_constant
	_signed_constant
	_infix_operator
	}

inline ::= {
	_parameter
	_argument
	_extension
	_item_extension
	_value_pattern
	_label_name
	_field_name
	_class_name
	_class_type_name
	_method_name
	_type_constructor
	_module_name
	_module_type_name
	_label
	}

word ::= _identifier

rules:

  compilation_unit ::= shebang? _structure?

  shebang ::= /#!.*/

  _structure ::= ';;'+
	| ';;'* ( _structure_item | toplevel_directive | expression_item ) ( ';;'* ( _structure_item | toplevel_directive ) | ';;'+ expression_item )* ';;'*

  expression_item ::= _sequence_expression item_attribute*

  _signature ::= ';;'+
	| ( ';;'* _signature_item )+ ';;'*

  toplevel_directive ::= directive ( _constant | value_path | module_path )?

  _structure_item ::= value_definition
	| external
	| type_definition
	| exception_definition
	| module_definition
	| module_type_definition
	| open_module
	| include_module
	| class_definition
	| class_type_definition
	| floating_attribute
	| _item_extension

  value_definition ::= ( 'let' _attribute? 'rec'? | let_operator ) let_binding ( ( 'and' | let_and_operator ) let_binding )*

  let_binding ::=  >0(  ( _binding_pattern ):pattern ( _parameter* _polymorphic_typed? ( ':>' _type )? '=' ( _sequence_expression ):body )? item_attribute* )

  _parameter ::= parameter
	| _parenthesized_abstract_type -> "abstract_type"

  parameter ::= ( _simple_pattern ):pattern
	| ( '~' | '?' ) ( _simple_value_pattern ):pattern
	| _label !( ':' ) ( _simple_pattern ):pattern
	| ( '~' | '?' ) '(' ( _simple_value_pattern ):pattern _typed? ( '=' _sequence_expression )? ')'
	| _label !( ':' ) '(' ( _pattern ):pattern _typed? '=' _sequence_expression ')'

  external ::= 'external' _attribute? _value_name _polymorphic_typed '=' string+ item_attribute*

  type_definition ::= 'type' _attribute? 'nonrec'? type_binding ( 'and' type_binding )*

  type_binding ::= _type_params? ( ( _type_constructor ):name _type_equation? ( '=' 'private'? ( variant_declaration | record_declaration | '..' ):body )? type_constraint* | ( type_constructor_path ):name '+=' 'private'? ( variant_declaration ):body ) item_attribute*

  _type_params ::= _type_param
	| '(' _type_param ( ',' _type_param )* ')'

  _type_param ::= ( '+' '!'? | '-' '!'? | '!' ( '+' | '-' )? )? ( type_variable | '_' -> "type_variable" )

  _type_equation ::= ( '=' | ':=' ) 'private'? _type

  variant_declaration ::= '|' ( constructor_declaration ( '|' constructor_declaration )* )?
	| constructor_declaration ( '|' constructor_declaration )*

  constructor_declaration ::= ( _constructor_name | ( '[' ']' | '(' ')' | 'true' | 'false' ) -> "constructor_name" ) ( 'of' _constructor_argument | ':' ( type_variable+ '.' )? ( _constructor_argument '->' )? _simple_type | '=' constructor_path )?

  _constructor_argument ::= _simple_type ( '*' _simple_type )*
	| record_declaration

  record_declaration ::= '{' field_declaration ( ';' field_declaration )* ';'? '}'

  field_declaration ::= 'mutable'? _field_name _polymorphic_typed

  type_constraint ::= 'constraint' _type '=' _type

  exception_definition ::= 'exception' _attribute? constructor_declaration item_attribute*

  module_definition ::= 'module' _attribute? 'rec'? module_binding ( 'and' module_binding )*

  module_binding ::= ( _module_name | '_' -> "module_name" ):name module_parameter* _module_typed? ( ( '=' | ':=' ) ( _module_expression ):body )? item_attribute*

  module_parameter ::= '(' ( ( _module_name | '_' -> "module_name" ):name _module_typed )? ')'

  module_type_definition ::= 'module' 'type' _attribute? ( _module_type_name ):name ( ( '=' | ':=' ) ( _module_type ):body )? item_attribute*

  open_module ::= 'open' '!'? _attribute? _module_expression item_attribute*

  include_module ::= 'include' _attribute? _module_expression item_attribute*

  class_definition ::= 'class' _attribute? class_binding ( 'and' class_binding )*

  class_binding ::=  >0(  'virtual'? ( '[' _type_param ( ',' _type_param )* ']' )? ( _class_name ):name _parameter* _class_typed? ( '=' ( _class_expression ):body )? item_attribute* )

  class_type_definition ::= 'class' 'type' _attribute? class_type_binding ( 'and' class_type_binding )*

  class_type_binding ::= 'virtual'? ( '[' _type_param ( ',' _type_param )* ']' )? ( _class_type_name ):name '=' ( _simple_class_type ):body item_attribute*

  _signature_item ::= value_specification
	| external
	| type_definition
	| exception_definition
	| module_definition
	| module_type_definition
	| open_module
	| include_module_type
	| class_definition
	| class_type_definition
	| floating_attribute
	| _item_extension

  value_specification ::= 'val' _attribute? _value_name _polymorphic_typed item_attribute*

  include_module_type ::= 'include' _attribute? _module_type item_attribute*

  _module_typed ::= ':' _module_type

  _module_type ::= module_type_path
	| signature
	| module_type_constraint
	| module_type_of
	| functor_type
	| parenthesized_module_type
	| _extension

  signature ::= 'sig' _signature? 'end'

  module_type_constraint ::=  >0(  _module_type 'with' ( constrain_type | constrain_module | constrain_module_type ) ( 'and' ( constrain_type | constrain_module | constrain_module_type ) )* )

  constrain_type ::= 'type' _type_params? type_constructor_path _type_equation type_constraint*

  constrain_module ::= 'module' module_path ( '=' | ':=' ) extended_module_path

  constrain_module_type ::=  <0(  'module' 'type' module_type_path ( '=' | ':=' ) _module_type )

  module_type_of ::= 'module' 'type' 'of' _module_expression

  functor_type ::=  >0(  ( 'functor' module_parameter* | _module_type | '(' ')' ) '->' _module_type )

  parenthesized_module_type ::= '(' _module_type ')'

  _simple_module_expression ::= typed_module_expression
	| parenthesized_module_expression
	| packed_module
	| _extension

  _module_expression ::= _simple_module_expression
	| module_path
	| structure
	| functor
	| module_application

  structure ::= 'struct' _structure? 'end'

  functor ::=  >0(  'functor' module_parameter+ '->' ( _module_expression ):body )

  module_application ::= ( _module_expression ):functor ( ( _simple_module_expression ):argument | '(' ')' )

  typed_module_expression ::= '(' _module_expression _module_typed ')'

  packed_module ::= '(' 'val' _expression _module_typed? ( ':>' _module_type )? ')'

  parenthesized_module_expression ::= '(' _module_expression ')'

  _class_typed ::= ':' _class_type

  _simple_class_type ::= class_type_path
	| instantiated_class_type
	| class_body_type
	| let_open_class_type
	| _extension

  _class_type ::= _simple_class_type
	| class_function_type

  instantiated_class_type ::= '[' _type ( ',' _type )* ']' class_type_path

  class_body_type ::= 'object' ( '(' _type ')' )? ( _class_field_specification | floating_attribute )* 'end'

  _class_field_specification ::= inheritance_specification
	| instance_variable_specification
	| method_specification
	| type_parameter_constraint
	| _item_extension

  inheritance_specification ::= 'inherit' _simple_class_type item_attribute*

  instance_variable_specification ::= 'val' ( 'mutable' | 'virtual' )* _instance_variable_name _typed item_attribute*

  method_specification ::= 'method' ( 'private' | 'virtual' )* _method_name _polymorphic_typed item_attribute*

  type_parameter_constraint ::= 'constraint' _type '=' _type item_attribute*

  let_open_class_type ::=  >2(  'let' open_module 'in' ( _simple_class_type ):body )

  class_function_type ::=  >3(  ( '?'? _label_name ':' )? _tuple_type '->' _class_type )

  _simple_class_expression ::= class_path
	| instantiated_class
	| object_expression
	| typed_class_expression
	| parenthesized_class_expression
	| _extension

  _class_expression ::= _simple_class_expression
	| class_function
	| class_application
	| let_class_expression
	| let_open_class_expression

  instantiated_class ::= '[' _type ( ',' _type )* ']' class_path

  typed_class_expression ::= '(' _class_expression _class_typed ')'

  class_function ::=  >2(  'fun' _parameter+ '->' ( _class_expression ):body )

  class_application ::=  >16(  ( _simple_class_expression ):class ( _argument )+:argument )

  let_class_expression ::=  >2(  value_definition 'in' ( _class_expression ):body )

  _class_field ::= inheritance_definition
	| instance_variable_definition
	| method_definition
	| type_parameter_constraint
	| class_initializer
	| _item_extension

  inheritance_definition ::= 'inherit' '!'? _class_expression ( 'as' _value_pattern )? item_attribute*

  instance_variable_definition ::= 'val' '!'? ( 'mutable' | 'virtual' )* ( _instance_variable_name ):name _typed? ( ':>' _type )? ( '=' ( _sequence_expression ):body )? item_attribute*

  method_definition ::= 'method' '!'? ( 'private' | 'virtual' )* ( _method_name ):name _parameter* _polymorphic_typed? ( '=' ( _sequence_expression ):body )? item_attribute*

  class_initializer ::= 'initializer' _sequence_expression item_attribute*

  let_open_class_expression ::=  >2(  'let' open_module 'in' ( _class_expression ):body )

  parenthesized_class_expression ::= '(' _class_expression ')'

  _typed ::= ':' _type

  _simple_typed ::= ':' _simple_type

  _polymorphic_typed ::= ':' _polymorphic_type

  _polymorphic_type ::= polymorphic_type
	| _type

  polymorphic_type ::= ( type_variable+ | _abstract_type -> "abstract_type" ) '.' _type

  _abstract_type ::= 'type' _type_constructor+

  _parenthesized_abstract_type ::= '(' _abstract_type ')'

  _simple_type ::= type_variable
	| type_constructor_path
	| constructed_type
	| local_open_type
	| polymorphic_variant_type
	| package_type
	| hash_type
	| object_type
	| parenthesized_type
	| _extension

  _tuple_type ::= _simple_type
	| tuple_type

  _type ::= _tuple_type
	| function_type
	| aliased_type

  function_type ::=  >3(  ( typed_label | _type ) '->' _type )

  typed_label ::=  <3(  '?'? _label_name ':' _type )

  tuple_type ::=  6(  _tuple_type '*' _simple_type )

  constructed_type ::=  16(  ( _simple_type | '(' _type ( ',' _type )* ')' ) type_constructor_path )

  aliased_type ::=  2(  _type 'as' type_variable )

  local_open_type ::= extended_module_path '.' ( '(' _type ')' | package_type | polymorphic_variant_type )

  polymorphic_variant_type ::= ( '[' tag_specification ']' | '[' _tag_spec? '|' _tag_spec ( '|' _tag_spec )* ']' | '[>' '|'? ( _tag_spec ( '|' _tag_spec )* )? ']' | '[<' '|'? _tag_spec ( '|' _tag_spec )* ( '>' tag+ )? ']' )

  _tag_spec ::= _type
	| tag_specification

  tag_specification ::= tag ( 'of' '&'? _type ( '&' _type )* )?

  package_type ::= '(' 'module' _attribute? _module_type ')'

  object_type ::= '<' ( ( method_type | _simple_type ) ( ';' ( method_type | _simple_type ) )* ( ';' '..'? )? | '..' )? '>'

  method_type ::= _method_name _polymorphic_typed

  hash_type ::=  17(  ( _simple_type | '(' _type ( ',' _type )* ')' )? '#' class_type_path )

  parenthesized_type ::= '(' _type ')'

  _simple_expression ::= value_path
	| _constant
	| typed_expression
	| constructor_path
	| tag
	| list_expression
	| array_expression
	| record_expression
	| prefix_expression
	| hash_expression
	| field_get_expression
	| array_get_expression
	| string_get_expression
	| bigarray_get_expression
	| coercion_expression
	| local_open_expression
	| package_expression
	| new_expression
	| object_copy_expression
	| method_invocation
	| object_expression
	| parenthesized_expression
	| ocamlyacc_value
	| _extension

  _expression ::= _simple_expression
	| product_expression
	| cons_expression
	| application_expression
	| infix_expression
	| sign_expression
	| set_expression
	| if_expression
	| while_expression
	| for_expression
	| match_expression
	| function_expression
	| fun_expression
	| try_expression
	| let_expression
	| assert_expression
	| lazy_expression
	| let_module_expression
	| let_open_expression
	| let_exception_expression

  _sequence_expression ::= _expression
	| sequence_expression

  typed_expression ::= '(' _sequence_expression _typed ')'

  product_expression ::=  <6(  ( _expression ):left ',' ( _expression ):right )

  cons_expression ::=  >11(  ( _expression ):left '::' ( _expression ):right )

  list_expression ::= '[' ( _expression ( ';' _expression )* ';'? )? ']'

  array_expression ::= '[|' ( _expression ( ';' _expression )* ';'? )? '|]'

  record_expression ::= '{' ( _simple_expression 'with' )? field_expression ( ';' field_expression )* ';'? '}'

  field_expression ::=  3(  ( field_path ):name _typed? ( '=' ( _expression ):body )? )

  application_expression ::=  >16(  ( _simple_expression ):function ( _argument )+:argument )

  _argument ::= _simple_expression
	| labeled_argument

  labeled_argument ::= _label
	| _label !( ':' ) _simple_expression
	| ( '~' | '?' ) '(' _label_name _typed ')'

  prefix_expression ::=  19(  ( prefix_operator ):operator ( _simple_expression ):right )

  sign_expression ::=  15(  ( sign_operator ):operator ( _expression ):right )

  hash_expression ::=  <17(  ( _simple_expression ):left ( hash_operator ):operator ( _simple_expression ):right )

  infix_expression ::=  >14(  ( _expression ):left ( pow_operator ):operator ( _expression ):right )
	|  <13(  ( _expression ):left ( mult_operator ):operator ( _expression ):right )
	|  <12(  ( _expression ):left ( add_operator ):operator ( _expression ):right )
	|  >10(  ( _expression ):left ( concat_operator ):operator ( _expression ):right )
	|  <9(  ( _expression ):left ( rel_operator ):operator ( _expression ):right )
	|  >8(  ( _expression ):left ( and_operator ):operator ( _expression ):right )
	|  >7(  ( _expression ):left ( or_operator ):operator ( _expression ):right )
	|  >5(  ( _expression ):left ( assign_operator ):operator ( _expression ):right )

  field_get_expression ::=  <18(  _simple_expression '.' field_path )

  array_get_expression ::=  18(  _simple_expression '.' indexing_operator_path? '(' _sequence_expression ')' )

  string_get_expression ::=  18(  _simple_expression '.' indexing_operator_path? '[' _sequence_expression ']' )

  bigarray_get_expression ::=  18(  _simple_expression '.' indexing_operator_path? '{' _sequence_expression '}' )

  set_expression ::=  >5(  ( field_get_expression | array_get_expression | string_get_expression | bigarray_get_expression | _instance_variable_name ) '<-' ( _expression ):body )

  if_expression ::=  >4(  'if' _attribute? ( _sequence_expression ):condition then_clause else_clause? )

  then_clause ::= 'then' _expression

  else_clause ::= 'else' _expression

  while_expression ::= 'while' _attribute? ( _sequence_expression ):condition do_clause

  do_clause ::= 'do' _sequence_expression? 'done'

  for_expression ::= 'for' _attribute? ( _value_pattern ):name '=' ( _sequence_expression ):from ( 'to' | 'downto' ) ( _sequence_expression ):to do_clause

  sequence_expression ::=  >3(  ( _expression ):left ';' ( _attribute? ( _sequence_expression ):right )? )

  match_expression ::=  >2(  ( 'match' _attribute? | match_operator ) _sequence_expression 'with' _match_cases )

  _match_cases ::=  >0(  '|'? match_case ( '|' match_case )* )

  match_case ::= ( _pattern ):pattern guard? '->' ( _sequence_expression | refutation_case ):body

  guard ::= 'when' _sequence_expression

  refutation_case ::= '.'

  function_expression ::=  >2(  'function' _attribute? _match_cases )

  fun_expression ::=  >2(  'fun' _attribute? _parameter+ _simple_typed? '->' ( _sequence_expression ):body )

  try_expression ::=  >2(  'try' _attribute? _sequence_expression 'with' _match_cases )

  let_expression ::=  >2(  value_definition 'in' _sequence_expression )

  coercion_expression ::= '(' _sequence_expression _typed? ':>' _type ')'

  assert_expression ::=  <16(  'assert' _attribute? _simple_expression )

  lazy_expression ::=  <16(  'lazy' _attribute? _simple_expression )

  let_module_expression ::=  >2(  'let' module_definition 'in' ( _sequence_expression ):body )

  let_open_expression ::=  >2(  'let' open_module 'in' ( _sequence_expression ):body )

  local_open_expression ::= module_path '.' ( '(' _sequence_expression? ')' | list_expression | array_expression | record_expression | object_copy_expression | package_expression )

  package_expression ::= '(' 'module' _attribute? _module_expression _module_typed? ')'

  let_exception_expression ::=  >2(  'let' exception_definition 'in' ( _sequence_expression ):body )

  new_expression ::= 'new' _attribute? class_path

  object_copy_expression ::= '{<' ( instance_variable_expression ( ';' instance_variable_expression )* )? ';'? '>}'

  instance_variable_expression ::= _instance_variable_name ( '=' _expression )?

  method_invocation ::=  >17(  _simple_expression '#' _method_name )

  object_expression ::= 'object' _attribute? ( '(' _pattern _typed? ')' )? ( _class_field | floating_attribute )* 'end'

  parenthesized_expression ::= 'begin' _attribute? _sequence_expression 'end'
	| '(' _sequence_expression ')'

  ocamlyacc_value ::= /\$[0-9]+/

  _simple_pattern ::= _value_pattern
	| _signed_constant
	| typed_pattern
	| constructor_path
	| tag
	| polymorphic_variant_pattern
	| record_pattern
	| list_pattern
	| array_pattern
	| local_open_pattern
	| package_pattern
	| parenthesized_pattern
	| _extension

  _pattern ::= _simple_pattern
	| alias_pattern
	| or_pattern
	| constructor_pattern
	| tag_pattern
	| tuple_pattern
	| cons_pattern
	| range_pattern
	| lazy_pattern
	| exception_pattern

  _binding_pattern ::= _value_name
	| _signed_constant
	| typed_binding_pattern -> "typed_pattern"
	| constructor_path
	| tag
	| polymorphic_variant_pattern
	| record_binding_pattern -> "record_pattern"
	| list_binding_pattern -> "list_pattern"
	| array_binding_pattern -> "array_pattern"
	| local_open_binding_pattern -> "local_open_pattern"
	| package_pattern
	| parenthesized_binding_pattern -> "parenthesized_pattern"
	| alias_binding_pattern -> "alias_pattern"
	| or_binding_pattern -> "or_pattern"
	| constructor_binding_pattern -> "constructor_pattern"
	| tag_binding_pattern -> "tag_pattern"
	| tuple_binding_pattern -> "tuple_pattern"
	| cons_binding_pattern -> "cons_pattern"
	| range_pattern
	| lazy_binding_pattern -> "lazy_pattern"
	| _extension

  alias_pattern ::=  <2(  _pattern 'as' _value_pattern )

  alias_binding_pattern ::=  <2(  _binding_pattern 'as' _value_name )

  typed_pattern ::= '(' _pattern _typed ')'

  typed_binding_pattern ::= '(' ( _binding_pattern ):pattern _typed ')'

  or_pattern ::=  <3(  _pattern '|' _pattern )

  or_binding_pattern ::=  <3(  _binding_pattern '|' _binding_pattern )

  constructor_pattern ::=  >16(  constructor_path _parenthesized_abstract_type -> "abstract_type"? _pattern )

  constructor_binding_pattern ::=  >16(  constructor_path ( _binding_pattern ):pattern )

  tag_pattern ::=  >16(  tag _pattern )

  tag_binding_pattern ::=  >16(  tag ( _binding_pattern ):pattern )

  polymorphic_variant_pattern ::= '#' type_constructor_path

  tuple_pattern ::=  <6(  _pattern ',' _pattern )

  tuple_binding_pattern ::=  <6(  _binding_pattern ',' _binding_pattern )

  record_pattern ::=  <0(  '{' field_pattern ( ';' field_pattern )* ( ';' '_' )? ';'? '}' )

  field_pattern ::= field_path _typed? ( '=' _pattern )?

  record_binding_pattern ::=  <0(  '{' field_binding_pattern -> "field_pattern" ( ';' field_binding_pattern -> "field_pattern" )* ( ';' '_' )? ';'? '}' )

  field_binding_pattern ::= field_path _typed? ( '=' ( _binding_pattern ):pattern )?

  list_pattern ::=  <0(  '[' ( _pattern ( ';' _pattern )* ';'? )? ']' )

  list_binding_pattern ::=  <0(  '[' ( _binding_pattern ( ';' _binding_pattern )* ';'? )? ']' )

  cons_pattern ::=  >11(  _pattern '::' _pattern )

  cons_binding_pattern ::=  >11(  _binding_pattern '::' _binding_pattern )

  array_pattern ::=  <0(  '[|' ( _pattern ( ';' _pattern )* ';'? )? '|]' )

  array_binding_pattern ::=  <0(  '[|' ( _binding_pattern ( ';' _binding_pattern )* ';'? )? '|]' )

  range_pattern ::=  18(  _signed_constant '..' _signed_constant )

  lazy_pattern ::=  17(  'lazy' _attribute? _pattern )

  lazy_binding_pattern ::=  17(  'lazy' _attribute? _binding_pattern )

  local_open_pattern ::= module_path '.' ( '(' _pattern? ')' | list_pattern | array_pattern | record_pattern )

  local_open_binding_pattern ::= module_path '.' ( '(' _binding_pattern? ')' | list_binding_pattern | array_binding_pattern | record_binding_pattern )

  package_pattern ::= '(' 'module' _attribute? ( _module_name | '_' -> "module_name" ) _module_typed? ')'

  parenthesized_pattern ::= '(' _pattern ')'

  parenthesized_binding_pattern ::= '(' _binding_pattern ')'

  exception_pattern ::= 'exception' _attribute? _pattern

  ;attribute ::= /\[@/ -> "[@" attribute_id attribute_payload? ']' FIXME
  attribute ::= /\x5b@/ -> "[@" attribute_id attribute_payload? ']'

  item_attribute ::= '[@@' attribute_id attribute_payload? ']'

  floating_attribute ::= '[@@@' attribute_id attribute_payload? ']'

  attribute_payload ::= _structure
	| ':' ( _type | _signature )?
	| '?' _pattern guard?

  _extension ::= extension
	| quoted_extension

  extension ::= '[%' attribute_id attribute_payload? ']'

  quoted_extension ::= '{%' attribute_id /\s+/? _quoted_string '}'

  _item_extension ::= item_extension
	| quoted_item_extension

  item_extension ::= '[%%' attribute_id attribute_payload? ']' item_attribute*

  quoted_item_extension ::= '{%%' attribute_id /\s+/? _quoted_string '}' item_attribute*

  _attribute ::= '%' attribute_id

  _constant ::= number
	| character
	| string
	| quoted_string
	| boolean
	| unit

  _signed_constant ::= _constant
	| signed_number

  number ::= @( /[0-9][0-9_]*(\.[0-9_]*)?([eE][+\-]?[0-9][0-9_]*)?[g-zG-Z]?/ | /0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(\.[0-9A-Fa-f_]*)?([pP][+\-]?[0-9][0-9_]*)?[g-zG-Z]?/ | /0[oO][0-7][0-7_]*[g-zG-Z]?/ | /0[bB][01][01_]*[g-zG-Z]?/ )

  signed_number ::= /[+-]/ @( /[0-9][0-9_]*(\.[0-9_]*)?([eE][+\-]?[0-9][0-9_]*)?[g-zG-Z]?/ | /0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(\.[0-9A-Fa-f_]*)?([pP][+\-]?[0-9][0-9_]*)?[g-zG-Z]?/ | /0[oO][0-7][0-7_]*[g-zG-Z]?/ | /0[bB][01][01_]*[g-zG-Z]?/ )

  character ::= "'"  character_content !( "'"  )

  character_content ::= !( /\r*\n/ )
	| !( /[^\\'\r\n]/ )
	| _null
	| escape_sequence

  string ::= '"'  string_content? '"'

  string_content ::= ( !( /\s/ ) | !( /\x5B@/ ) | /[^\\"%@]+|%|@/ | _null | escape_sequence | /\\u\{[0-9A-Fa-f]+\}/ -> "escape_sequence" | /\\\r*\n[\t ]*/ -> "escape_sequence" | conversion_specification | pretty_printing_indication )+

  quoted_string ::= '{' _quoted_string '}'

  _quoted_string ::= _left_quoted_string_delimiter quoted_string_content? _right_quoted_string_delimiter

  quoted_string_content ::= ( !( /\s/ ) | !( /\x5B@/ ) | /[^%@|]+|%|@|\|/ | _null | conversion_specification | pretty_printing_indication )+

  escape_sequence ::= /\\[\\"'ntbr ]/
	| /\\[0-9][0-9][0-9]/
	| /\\x[0-9A-Fa-f][0-9A-Fa-f]/
	| /\\o[0-3][0-7][0-7]/

  conversion_specification ::= @( '%' /[\-0+ #]/? /[1-9][0-9]*|\*/? /\.([0-9]*|\*)/? ( /[diunlLNxXosScCfFeEgGhHbBat!%@,]/ | /[lnL][diuxXo]/ ) )

  pretty_printing_indication ::= /@([\[\], ;.{}?]|\\n|<[0-9]+>)/

  boolean ::= 'true'
	| 'false'

  unit ::= '(' ')'
	| 'begin' 'end'

  prefix_operator ::= @( '!' ( /[#!$%&*+\-./:<>?@^|~]/ | /[#!$%&*+\-./:<=>?@^|~]/ /[#!$%&*+\-./:<=>?@^|~]/+ ) | /[~?]/ /[#!$%&*+\-./:<=>?@^|~]/+ )

  sign_operator ::= /[+-]/
	| /[+-]\./

  _infix_operator ::= pow_operator
	| mult_operator
	| add_operator
	| concat_operator
	| rel_operator
	| and_operator
	| or_operator
	| assign_operator

  hash_operator ::= @( '#' /[#!$%&*+\-./:<=>?@^|~]/+ )

  pow_operator ::= @( 'lsl' | 'lsr' | 'asr' | '**' /[!$%&*+\-./:<=>?@^|~]/* )

  mult_operator ::= @( 'mod' | 'land' | 'lor' | 'lxor' | /[*/%]/ /[!$%&*+\-./:<=>?@^|~]/* )

  add_operator ::= /[+-]/
	| /[+-]\./
	| @( '+' /[!$%&*+\-./:<=>?@^|~]/+ | '-' ( /[!$%&*+\-./:<=?@^|~]/+ | /[!$%&*+\-./:<=>?@^|~]/ /[!$%&*+\-./:<=>?@^|~]/+ ) )

  concat_operator ::= @( /[@^]/ /[!$%&*+\-./:<=>?@^|~]/* )

  rel_operator ::= @( /[=>$]/ /[!$%&*+\-./:<=>?@^|~]/* | '<' ( /[!$%&*+./:<=>?@^|~]/ | /[!$%&*+\-./:<=>?@^|~]/ /[!$%&*+\-./:<=>?@^|~]/+ ) | '&' ( /[!$%*+\-./:<=>?@^|~]/ | /[!$%&*+\-./:<=>?@^|~]/ /[!$%&*+\-./:<=>?@^|~]/+ ) | '|' ( /[!$%&*+\-./:<=>?@^~]/ | /[!$%&*+\-./:<=>?@^|~]/ /[!$%&*+\-./:<=>?@^|~]/+ ) | '!=' )

  and_operator ::= @( '&' | '&&' )

  or_operator ::= @( 'or' | '||' )

  assign_operator ::= /:=/

  indexing_operator ::= @( /[!$%&*+\-/:=>?@^|]/ /[!$%&*+\-./:<=>?@^|~]/* )

  indexing_operator_path ::= indexing_operator
	| module_path '.' indexing_operator

  let_operator ::= @( 'let' /[$&*+\-/<=>@^|]/ /[!$%&*+\-./:<=>?@^|~]/* )

  let_and_operator ::= @( 'and' /[$&*+\-/<=>@^|]/ /[!$%&*+\-./:<=>?@^|~]/* )

  match_operator ::= @( 'match' /[$&*+\-/<=>@^|]/ /[!$%&*+\-./:<=>?@^|~]/* )

  _value_name ::= _identifier -> "value_name"
	| parenthesized_operator

  _simple_value_pattern ::= _identifier -> "value_pattern"

  _value_pattern ::= _simple_value_pattern
	| parenthesized_operator

  parenthesized_operator ::= '(' ( prefix_operator | _infix_operator | hash_operator | '.' indexing_operator ( '(' ( ';' '..' )? ')' | '[' ( ';' '..' )? ']' | '{' ( ';' '..' )? '}' ) '<-'? | let_operator | let_and_operator | match_operator ) ')'

  value_path ::= _value_name
	| module_path '.' _value_name

  module_path ::=  1(  _module_name | module_path '.' _module_name )

  extended_module_path ::= _module_name
	| extended_module_path '.' _module_name
	| extended_module_path '(' extended_module_path ')'

  module_type_path ::= _module_type_name
	| extended_module_path '.' _module_type_name

  field_path ::= _field_name
	| module_path '.' _field_name

  constructor_path ::= _constructor_name
	| module_path '.' _constructor_name

  type_constructor_path ::= _type_constructor
	| extended_module_path '.' _type_constructor

  class_path ::= _class_name
	| module_path '.' _class_name

  class_type_path ::= _class_type_name
	| extended_module_path '.' _class_type_name

  _label_name ::= _identifier -> "label_name"

  _field_name ::= _identifier -> "field_name"

  _class_name ::= _identifier -> "class_name"

  _class_type_name ::= _identifier -> "class_type_name"

  _method_name ::= _identifier -> "method_name"

  _type_constructor ::= _identifier -> "type_constructor"

  _instance_variable_name ::= _identifier -> "instance_variable_name"

  _module_name ::= _capitalized_identifier -> "module_name"

  _module_type_name ::= ( _capitalized_identifier | _identifier ) -> "module_type_name"

  _constructor_name ::= _capitalized_identifier -> "constructor_name"
	| '(' '::' -> "constructor_name" ')'

  _identifier ::= /(\\#)?[a-z_][a-zA-Z0-9_']*/

  _capitalized_identifier ::= /[A-Z][a-zA-Z0-9_']*/

  _label ::= ( '~' | '?' ) _label_name

  directive ::= /#/ ( _identifier | _capitalized_identifier )

  type_variable ::= /'/ ( _identifier | _capitalized_identifier )

  tag ::= /`/ ( _identifier | _capitalized_identifier )

  attribute_id ::= ( _identifier | _capitalized_identifier ) ( /\./ ( _identifier | _capitalized_identifier ) )*

