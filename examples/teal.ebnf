; repository: https://github.com/euclidianAce/tree-sitter-teal.git
; commit: 19b02da829d1721a521bf7b802eb80a50bd53aab
; json from: tree-sitter-teal/src/grammar.json
; From /tmp/tslua/teal0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	comment
	_long_string_start
	_long_string_char
	_long_string_end
	_short_string_start
	_short_string_char
	_short_string_end
	}

extras ::= {
	comment
	/[\s\n]/
	}

inline ::= {
	scope
	_partypelist
	_parnamelist
	_type_list_maybe_vararg
	}

conflicts ::= {
	{ _var table_entry }
	{ return_type }
	}

word ::= identifier

rules:

  program ::= !( /#![^\n\r]*/ )? -> shebang_comment _statement*

  _statement ::=  1(  ( var_declaration | var_assignment | type_declaration | record_declaration | enum_declaration | return_statement | break | _for_statement | do_statement | while_statement | repeat_statement | function_call | function_statement | if_statement | '::' identifier -> label '::' | goto ) ';'? ) 

  return_statement ::=  >1(  'return' ( _expression ( ',' _expression )* | '(' _expression ( ',' _expression )* ')' )? ) 

  break ::= 'break'

  if_statement ::= 'if' _expression:condition 'then' _statement* elseif_block* else_block? 'end'

  elseif_block ::= 'elseif' _expression:condition 'then' _statement*

  else_block ::= 'else' _statement*

  numeric_for_statement ::= 'for' identifier:variable '=' _expression:initializer ',' _expression:target ( ',' _expression:step )? ( do_statement -> for_body ):body

  generic_for_statement ::= 'for' ( identifier ( ',' identifier )* ):variable 'in' ( _expression ( ',' _expression )* ):iterator ( do_statement -> for_body ):body

  _for_statement ::= numeric_for_statement
	| generic_for_statement

  while_statement ::= 'while' _expression:condition do_statement -> while_body

  repeat_statement ::= 'repeat' _statement* 'until' _expression:condition

  do_statement ::= 'do' _statement* 'end'

  _expression ::= identifier
	| _var
	| number
	| string
	| boolean
	| nil
	| table_constructor
	| anon_function
	| function_call
	| _prefix_expression
	| bin_op
	| unary_op
	| varargs
	| type_cast
	| parenthesized_expression

  parenthesized_expression ::= '(' _expression ')'

  unary_op ::=  <12(  ( ( 'not' | '#' | '-' | '~' ) -> op ):op _expression:right ) 

  bin_op ::=  <1(  _expression:left ( 'or' -> op ):op _expression:right ) 
	|  <2(  _expression:left ( 'and' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '<' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '<=' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '==' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '~=' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '>=' -> op ):op _expression:right ) 
	|  <4(  _expression:left ( '>' -> op ):op _expression:right ) 
	|  <5(  _expression:left ( '|' -> op ):op _expression:right ) 
	|  <6(  _expression:left ( '~' -> op ):op _expression:right ) 
	|  <7(  _expression:left ( '&' -> op ):op _expression:right ) 
	|  <8(  _expression:left ( '<<' -> op ):op _expression:right ) 
	|  <8(  _expression:left ( '>>' -> op ):op _expression:right ) 
	|  <10(  _expression:left ( '+' -> op ):op _expression:right ) 
	|  <10(  _expression:left ( '-' -> op ):op _expression:right ) 
	|  <11(  _expression:left ( '*' -> op ):op _expression:right ) 
	|  <11(  _expression:left ( '/' -> op ):op _expression:right ) 
	|  <11(  _expression:left ( '//' -> op ):op _expression:right ) 
	|  <11(  _expression:left ( '%' -> op ):op _expression:right ) 
	|  >9(  _expression:left ( '..' -> op ):op _expression:right ) 
	|  >13(  _expression:left ( '^' -> op ):op _expression:right ) 
	|  >3(  _expression:left ( 'is' -> op ):op _type:right ) 

  type_cast ::=  >100(  _expression 'as' ( _type | type_tuple ) ) 

  type_tuple ::=  10(  '(' _type ( ',' _type )* ')' ) 

  type_union ::=  <100(  _type '|' _type ) 

  var_declarator ::= identifier:name ( '<' ( identifier -> attribute ):attribute '>' )?

  var_declarators ::= var_declarator -> var ( ',' var_declarator -> var )*

  expressions ::= _expression ( ',' _expression )*

  var_declaration ::= scope var_declarators:declarators ( type_annotation:type_annotation )? ( '=' expressions:initializers )?

  _type_def ::= 'type' identifier:name '=' ( _type | _newtype ):value

  type_declaration ::= scope:scope _type_def
	| record_declaration
	| enum_declaration

  assignment_variables ::= _var -> var ( ',' _var -> var )*

  var_assignment ::= assignment_variables:variables '=' expressions:expressions

  _prefix_expression ::=  10(  _var | function_call | parenthesized_expression ) 

  method_index ::= _prefix_expression ':' identifier:key

  arguments ::= '(' ( _expression ( ',' _expression )* )? ')'
	| string
	| table_constructor

  function_call ::=  10(  ( _prefix_expression | method_index ):called_object arguments:arguments ) 

  table_entry ::= '[' _expression:expr_key ']' '=' _expression:value
	|  1(  identifier:key ( ':' _type )?:type '=' _expression:value ) 
	|  1(  _expression:value ) 

  table_constructor ::= '{' ( table_entry ( ( ',' | ';' ) table_entry )* )? ( ',' | ';' )? '}'

  function_name ::= identifier:base ( ( '.' identifier:entry )* ':' identifier:method | ( '.' identifier:entry )+ )

  scope ::= ( 'local' | 'global' ):scope

  function_statement ::= scope 'function' identifier:name function_signature:signature function_body:body
	| 'function' function_name:name function_signature:signature function_body:body

  variadic_type ::=  999(  _type '...' ) 

  _type_list_maybe_vararg ::= _type ( ',' _type )* ( ',' variadic_type )?

  return_type ::= variadic_type
	|  ~1(  _type_list_maybe_vararg ) 
	|  ~10(  '(' _type_list_maybe_vararg ')' ) 

  _partypelist ::= _partype -> arg ( ',' _partype -> arg )*

  _partype ::= ( identifier:name ':' )? _type:type

  _parnamelist ::= _parname -> arg ( ',' _parname -> arg )*

  _parname ::= identifier:name ( ':' _type:type )?

  typeargs ::= '<' identifier ( ',' identifier )* '>'

  anon_function ::= 'function' function_signature:signature function_body:body

  _annotated_var_arg ::= '...' ':' _type:type

  signature_arguments ::= '(' ( _parnamelist | _parnamelist ',' _annotated_var_arg -> varargs | _annotated_var_arg -> varargs )? ')'

  function_signature ::= typeargs?:typeargs ( signature_arguments -> arguments ):arguments ( ':' return_type:return_type )?

  function_body ::= _statement* 'end'

  record_field ::= identifier:key ':' _type:type
	| '[' string:key ']' ':' _type:type
	| ( 'type' -> identifier ):key ':' _type:type
	| ( 'record' -> identifier ):key ':' _type:type
	| ( 'enum' -> identifier ):key ':' _type:type
	| ( 'userdata' -> identifier ):key ':' _type:type
	| ( 'metamethod' -> identifier ):key ':' _type:type

  _record_entry ::= record_field -> field
	| _type_def -> typedef
	| _record_def -> record_declaration
	| _enum_def -> enum_declaration

  metamethod_annotation ::= 'metamethod' identifier:name ':' _type:type

  record_body ::= ( '{' _type -> record_array_type '}' )? ( _record_entry | 'userdata' -> userdata | ( metamethod_annotation -> metamethod ):metamethod )* 'end'

  _record_def ::= 'record' identifier:name typeargs?:typeargs record_body:record_body

  record_declaration ::= scope _record_def

  enum_body ::= string* 'end'

  _enum_def ::= 'enum' identifier:name enum_body:enum_body

  enum_declaration ::= scope _enum_def

  anon_record ::= 'record' typeargs? record_body:record_body

  _anon_enum ::= 'enum' enum_body

  _newtype ::= _anon_enum
	| anon_record

  type_annotation ::= ':' _type ( ',' _type )*

  _type ::=  2(  simple_type | type_index | table_type | function_type | type_union | '(' _type ')' ) 

  typearg_params ::=  >1000(  '<' _type ( ',' _type )* '>' ) 

  type_index ::=  >1000(  ( identifier | type_index ) '.' identifier ( typearg_params -> typeargs )? ) 

  simple_type ::=  >1000(  identifier:name ( typearg_params -> typeargs )? ) 

  table_type ::= '{' ( _type:value_type | _type:key_type ':' _type:value_type | _type:tuple_type ( ',' _type:tuple_type )+ ) '}'

  function_type_args ::= '(' ( _partypelist ( ',' _annotated_var_arg -> varargs )? | _annotated_var_arg -> varargs )? ')'

  function_type ::=  >1(  'function' typeargs?:typeargs ( ( function_type_args -> arguments ):arguments ( ':' return_type:return_type )? )? ) 

  goto ::= 'goto' identifier

  index ::= _prefix_expression ( ( '.' identifier ):key | ( '[' _expression ']' ):expr_key )

  _var ::=  1(  identifier | index ) 

  varargs ::= '...'

  identifier ::= /[a-zA-Z_][a-zA-Z_0-9]*/

  number ::= /\d+(\.\d+)?(e\d+)?/i
	| /\.\d+(e\d+)?/i
	| /0x[0-9a-fA-F]+(\.[0-9a-fA-F]+)?(p\d+)?/

  boolean ::= 'true'
	| 'false'

  _short_string_content ::= ( format_specifier | escape_sequence | !(  1(  '%' )  ) |  0(  _short_string_char )  )+ -> string_content

  _long_string_content ::= ( format_specifier | _long_string_char | !(  1(  '%' )  ) )+ -> string_content

  string ::=  2(  ( _short_string_start -> "short_string_start" ):start _short_string_content?:content ( _short_string_end -> "short_string_end" ):end | ( _long_string_start -> "long_string_start" ):start _long_string_content?:content ( _long_string_end -> "long_string_end" ):end ) 

  format_specifier ::= !(  3(  '%' ( '%' | ( '+' | '-' )? ' '? '#'? /[0-9]+/? '.'? /[0-9]+/? /[AaEefGgcdiouXxpqs]/ ) )  )

  escape_sequence ::= !(  3(  '\\' ( /[abfnrtvz"'\\]/ | 'x' /[0-9a-fA-F]{2}/ | 'd' /[0-7]{3}/ | 'u{' /[0-9a-fA-F]{1,8}/ '}' ) )  )

  nil ::= 'nil'

