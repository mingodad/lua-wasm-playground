; repository: https://github.com/DerekStride/tree-sitter-sql.git
; commit: c649cb98ca91c660ba8a015aa1fcfc53b859b951
; json from: tree-sitter-sql/src/grammar.json
; From /tmp/tslua/sql0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	_dollar_quoted_string_start_tag
	_dollar_quoted_string_end_tag
	_dollar_quoted_string
	}

extras ::= {
	/\s\n/
	/\s/
	comment
	marginalia
	}

precedences ::= {
	{ 'binary_is' 'unary_not' 'binary_exp' 'binary_times' 'binary_plus' 'unary_other' 'binary_other' 'binary_in' 'binary_compare' 'binary_relation' 'pattern_matching' 'between' 'clause_connective' 'clause_disjunctive' }
	}

conflicts ::= {
	{ object_reference _qualified_field }
	{ object_reference }
	{ between_expression binary_expression }
	{ time }
	{ timestamp }
	}

word ::= _identifier

rules:

  program ::= ( ( transaction | statement | block ) ';' )* statement?

  keyword_select ::= /[sS][eE][lL][eE][cC][tT]/

  keyword_delete ::= /[dD][eE][lL][eE][tT][eE]/

  keyword_insert ::= /[iI][nN][sS][eE][rR][tT]/

  keyword_replace ::= /[rR][eE][pP][lL][aA][cC][eE]/

  keyword_update ::= /[uU][pP][dD][aA][tT][eE]/

  keyword_truncate ::= /[tT][rR][uU][nN][cC][aA][tT][eE]/

  keyword_merge ::= /[mM][eE][rR][gG][eE]/

  keyword_into ::= /[iI][nN][tT][oO]/

  keyword_overwrite ::= /[oO][vV][eE][rR][wW][rR][iI][tT][eE]/

  keyword_values ::= /[vV][aA][lL][uU][eE][sS]/

  keyword_value ::= /[vV][aA][lL][uU][eE]/

  keyword_matched ::= /[mM][aA][tT][cC][hH][eE][dD]/

  keyword_set ::= /[sS][eE][tT]/

  keyword_from ::= /[fF][rR][oO][mM]/

  keyword_left ::= /[lL][eE][fF][tT]/

  keyword_right ::= /[rR][iI][gG][hH][tT]/

  keyword_inner ::= /[iI][nN][nN][eE][rR]/

  keyword_full ::= /[fF][uU][lL][lL]/

  keyword_outer ::= /[oO][uU][tT][eE][rR]/

  keyword_cross ::= /[cC][rR][oO][sS][sS]/

  keyword_join ::= /[jJ][oO][iI][nN]/

  keyword_lateral ::= /[lL][aA][tT][eE][rR][aA][lL]/

  keyword_natural ::= /[nN][aA][tT][uU][rR][aA][lL]/

  keyword_on ::= /[oO][nN]/

  keyword_off ::= /[oO][fF][fF]/

  keyword_where ::= /[wW][hH][eE][rR][eE]/

  keyword_order ::= /[oO][rR][dD][eE][rR]/

  keyword_group ::= /[gG][rR][oO][uU][pP]/

  keyword_partition ::= /[pP][aA][rR][tT][iI][tT][iI][oO][nN]/

  keyword_by ::= /[bB][yY]/

  keyword_having ::= /[hH][aA][vV][iI][nN][gG]/

  keyword_desc ::= /[dD][eE][sS][cC]/

  keyword_asc ::= /[aA][sS][cC]/

  keyword_limit ::= /[lL][iI][mM][iI][tT]/

  keyword_offset ::= /[oO][fF][fF][sS][eE][tT]/

  keyword_primary ::= /[pP][rR][iI][mM][aA][rR][yY]/

  keyword_create ::= /[cC][rR][eE][aA][tT][eE]/

  keyword_alter ::= /[aA][lL][tT][eE][rR]/

  keyword_change ::= /[cC][hH][aA][nN][gG][eE]/

  keyword_analyze ::= /[aA][nN][aA][lL][yY][zZ][eE]/

  keyword_explain ::= /[eE][xX][pP][lL][aA][iI][nN]/

  keyword_verbose ::= /[vV][eE][rR][bB][oO][sS][eE]/

  keyword_modify ::= /[mM][oO][dD][iI][fF][yY]/

  keyword_drop ::= /[dD][rR][oO][pP]/

  keyword_add ::= /[aA][dD][dD]/

  keyword_table ::= /[tT][aA][bB][lL][eE]/

  keyword_tables ::= /[tT][aA][bB][lL][eE][sS]/

  keyword_view ::= /[vV][iI][eE][wW]/

  keyword_column ::= /[cC][oO][lL][uU][mM][nN]/

  keyword_columns ::= /[cC][oO][lL][uU][mM][nN][sS]/

  keyword_materialized ::= /[mM][aA][tT][eE][rR][iI][aA][lL][iI][zZ][eE][dD]/

  keyword_tablespace ::= /[tT][aA][bB][lL][eE][sS][pP][aA][cC][eE]/

  keyword_sequence ::= /[sS][eE][qQ][uU][eE][nN][cC][eE]/

  keyword_increment ::= /[iI][nN][cC][rR][eE][mM][eE][nN][tT]/

  keyword_minvalue ::= /[mM][iI][nN][vV][aA][lL][uU][eE]/

  keyword_maxvalue ::= /[mM][aA][xX][vV][aA][lL][uU][eE]/

  keyword_none ::= /[nN][oO][nN][eE]/

  keyword_owned ::= /[oO][wW][nN][eE][dD]/

  keyword_start ::= /[sS][tT][aA][rR][tT]/

  keyword_restart ::= /[rR][eE][sS][tT][aA][rR][tT]/

  keyword_key ::= /[kK][eE][yY]/

  keyword_as ::= /[aA][sS]/

  keyword_distinct ::= /[dD][iI][sS][tT][iI][nN][cC][tT]/

  keyword_constraint ::= /[cC][oO][nN][sS][tT][rR][aA][iI][nN][tT]/

  keyword_filter ::= /[fF][iI][lL][tT][eE][rR]/

  keyword_cast ::= /[cC][aA][sS][tT]/

  keyword_separator ::= /[sS][eE][pP][aA][rR][aA][tT][oO][rR]/

  keyword_max ::= /[mM][aA][xX]/

  keyword_min ::= /[mM][iI][nN]/

  keyword_avg ::= /[aA][vV][gG]/

  keyword_case ::= /[cC][aA][sS][eE]/

  keyword_when ::= /[wW][hH][eE][nN]/

  keyword_then ::= /[tT][hH][eE][nN]/

  keyword_else ::= /[eE][lL][sS][eE]/

  keyword_end ::= /[eE][nN][dD]/

  keyword_in ::= /[iI][nN]/

  keyword_and ::= /[aA][nN][dD]/

  keyword_or ::= /[oO][rR]/

  keyword_is ::= /[iI][sS]/

  keyword_not ::= /[nN][oO][tT]/

  keyword_force ::= /[fF][oO][rR][cC][eE]/

  keyword_ignore ::= /[iI][gG][nN][oO][rR][eE]/

  keyword_using ::= /[uU][sS][iI][nN][gG]/

  keyword_use ::= /[uU][sS][eE]/

  keyword_index ::= /[iI][nN][dD][eE][xX]/

  keyword_for ::= /[fF][oO][rR]/

  keyword_if ::= /[iI][fF]/

  keyword_exists ::= /[eE][xX][iI][sS][tT][sS]/

  keyword_auto_increment ::= /[aA][uU][tT][oO][__][iI][nN][cC][rR][eE][mM][eE][nN][tT]/

  keyword_generated ::= /[gG][eE][nN][eE][rR][aA][tT][eE][dD]/

  keyword_always ::= /[aA][lL][wW][aA][yY][sS]/

  keyword_collate ::= /[cC][oO][lL][lL][aA][tT][eE]/

  keyword_character ::= /[cC][hH][aA][rR][aA][cC][tT][eE][rR]/

  keyword_engine ::= /[eE][nN][gG][iI][nN][eE]/

  keyword_default ::= /[dD][eE][fF][aA][uU][lL][tT]/

  keyword_cascade ::= /[cC][aA][sS][cC][aA][dD][eE]/

  keyword_restrict ::= /[rR][eE][sS][tT][rR][iI][cC][tT]/

  keyword_with ::= /[wW][iI][tT][hH]/

  keyword_without ::= /[wW][iI][tT][hH][oO][uU][tT]/

  keyword_no ::= /[nN][oO]/

  keyword_data ::= /[dD][aA][tT][aA]/

  keyword_type ::= /[tT][yY][pP][eE]/

  keyword_rename ::= /[rR][eE][nN][aA][mM][eE]/

  keyword_to ::= /[tT][oO]/

  keyword_database ::= /[dD][aA][tT][aA][bB][aA][sS][eE]/

  keyword_schema ::= /[sS][cC][hH][eE][mM][aA]/

  keyword_owner ::= /[oO][wW][nN][eE][rR]/

  keyword_user ::= /[uU][sS][eE][rR]/

  keyword_admin ::= /[aA][dD][mM][iI][nN]/

  keyword_password ::= /[pP][aA][sS][sS][wW][oO][rR][dD]/

  keyword_encrypted ::= /[eE][nN][cC][rR][yY][pP][tT][eE][dD]/

  keyword_valid ::= /[vV][aA][lL][iI][dD]/

  keyword_until ::= /[uU][nN][tT][iI][lL]/

  keyword_connection ::= /[cC][oO][nN][nN][eE][cC][tT][iI][oO][nN]/

  keyword_role ::= /[rR][oO][lL][eE]/

  keyword_reset ::= /[rR][eE][sS][eE][tT]/

  keyword_temp ::= /[tT][eE][mM][pP]/

  keyword_temporary ::= /[tT][eE][mM][pP][oO][rR][aA][rR][yY]/

  keyword_unlogged ::= /[uU][nN][lL][oO][gG][gG][eE][dD]/

  keyword_logged ::= /[lL][oO][gG][gG][eE][dD]/

  keyword_cycle ::= /[cC][yY][cC][lL][eE]/

  keyword_union ::= /[uU][nN][iI][oO][nN]/

  keyword_all ::= /[aA][lL][lL]/

  keyword_any ::= /[aA][nN][yY]/

  keyword_some ::= /[sS][oO][mM][eE]/

  keyword_except ::= /[eE][xX][cC][eE][pP][tT]/

  keyword_intersect ::= /[iI][nN][tT][eE][rR][sS][eE][cC][tT]/

  keyword_returning ::= /[rR][eE][tT][uU][rR][nN][iI][nN][gG]/

  keyword_begin ::= /[bB][eE][gG][iI][nN]/

  keyword_commit ::= /[cC][oO][mM][mM][iI][tT]/

  keyword_rollback ::= /[rR][oO][lL][lL][bB][aA][cC][kK]/

  keyword_transaction ::= /[tT][rR][aA][nN][sS][aA][cC][tT][iI][oO][nN]/

  keyword_over ::= /[oO][vV][eE][rR]/

  keyword_nulls ::= /[nN][uU][lL][lL][sS]/

  keyword_first ::= /[fF][iI][rR][sS][tT]/

  keyword_after ::= /[aA][fF][tT][eE][rR]/

  keyword_before ::= /[bB][eE][fF][oO][rR][eE]/

  keyword_last ::= /[lL][aA][sS][tT]/

  keyword_window ::= /[wW][iI][nN][dD][oO][wW]/

  keyword_range ::= /[rR][aA][nN][gG][eE]/

  keyword_rows ::= /[rR][oO][wW][sS]/

  keyword_groups ::= /[gG][rR][oO][uU][pP][sS]/

  keyword_between ::= /[bB][eE][tT][wW][eE][eE][nN]/

  keyword_unbounded ::= /[uU][nN][bB][oO][uU][nN][dD][eE][dD]/

  keyword_preceding ::= /[pP][rR][eE][cC][eE][dD][iI][nN][gG]/

  keyword_following ::= /[fF][oO][lL][lL][oO][wW][iI][nN][gG]/

  keyword_exclude ::= /[eE][xX][cC][lL][uU][dD][eE]/

  keyword_current ::= /[cC][uU][rR][rR][eE][nN][tT]/

  keyword_row ::= /[rR][oO][wW]/

  keyword_ties ::= /[tT][iI][eE][sS]/

  keyword_others ::= /[oO][tT][hH][eE][rR][sS]/

  keyword_only ::= /[oO][nN][lL][yY]/

  keyword_unique ::= /[uU][nN][iI][qQ][uU][eE]/

  keyword_foreign ::= /[fF][oO][rR][eE][iI][gG][nN]/

  keyword_references ::= /[rR][eE][fF][eE][rR][eE][nN][cC][eE][sS]/

  keyword_concurrently ::= /[cC][oO][nN][cC][uU][rR][rR][eE][nN][tT][lL][yY]/

  keyword_btree ::= /[bB][tT][rR][eE][eE]/

  keyword_hash ::= /[hH][aA][sS][hH]/

  keyword_gist ::= /[gG][iI][sS][tT]/

  keyword_spgist ::= /[sS][pP][gG][iI][sS][tT]/

  keyword_gin ::= /[gG][iI][nN]/

  keyword_brin ::= /[bB][rR][iI][nN]/

  keyword_like ::= /[lL][iI][kK][eE]/
	| /[iI][lL][iI][kK][eE]/

  keyword_similar ::= /[sS][iI][mM][iI][lL][aA][rR]/

  keyword_preserve ::= /[pP][rR][eE][sS][eE][rR][vV][eE]/

  keyword_unsigned ::= /[uU][nN][sS][iI][gG][nN][eE][dD]/

  keyword_zerofill ::= /[zZ][eE][rR][oO][fF][iI][lL][lL]/

  keyword_conflict ::= /[cC][oO][nN][fF][lL][iI][cC][tT]/

  keyword_do ::= /[dD][oO]/

  keyword_nothing ::= /[nN][oO][tT][hH][iI][nN][gG]/

  keyword_high_priority ::= /[hH][iI][gG][hH][__][pP][rR][iI][oO][rR][iI][tT][yY]/

  keyword_low_priority ::= /[lL][oO][wW][__][pP][rR][iI][oO][rR][iI][tT][yY]/

  keyword_delayed ::= /[dD][eE][lL][aA][yY][eE][dD]/

  keyword_recursive ::= /[rR][eE][cC][uU][rR][sS][iI][vV][eE]/

  keyword_cascaded ::= /[cC][aA][sS][cC][aA][dD][eE][dD]/

  keyword_local ::= /[lL][oO][cC][aA][lL]/

  keyword_current_timestamp ::= /[cC][uU][rR][rR][eE][nN][tT][__][tT][iI][mM][eE][sS][tT][aA][mM][pP]/

  keyword_check ::= /[cC][hH][eE][cC][kK]/

  keyword_option ::= /[oO][pP][tT][iI][oO][nN]/

  keyword_vacuum ::= /[vV][aA][cC][uU][uU][mM]/

  keyword_wait ::= /[wW][aA][iI][tT]/

  keyword_nowait ::= /[nN][oO][wW][aA][iI][tT]/

  keyword_attribute ::= /[aA][tT][tT][rR][iI][bB][uU][tT][eE]/

  keyword_authorization ::= /[aA][uU][tT][hH][oO][rR][iI][zZ][aA][tT][iI][oO][nN]/

  keyword_action ::= /[aA][cC][tT][iI][oO][nN]/

  keyword_extension ::= /[eE][xX][tT][eE][nN][sS][iI][oO][nN]/

  keyword_copy ::= /[cC][oO][pP][yY]/

  keyword_stdin ::= /[sS][tT][dD][iI][nN]/

  keyword_freeze ::= /[fF][rR][eE][eE][zZ][eE]/

  keyword_escape ::= /[eE][sS][cC][aA][pP][eE]/

  keyword_encoding ::= /[eE][nN][cC][oO][dD][iI][nN][gG]/

  keyword_force_quote ::= /[fF][oO][rR][cC][eE][__][qQ][uU][oO][tT][eE]/

  keyword_quote ::= /[qQ][uU][oO][tT][eE]/

  keyword_force_null ::= /[fF][oO][rR][cC][eE][__][nN][uU][lL][lL]/

  keyword_force_not_null ::= /[fF][oO][rR][cC][eE][__][nN][oO][tT][__][nN][uU][lL][lL]/

  keyword_header ::= /[hH][eE][aA][dD][eE][rR]/

  keyword_match ::= /[mM][aA][tT][cC][hH]/

  keyword_program ::= /[pP][rR][oO][gG][rR][aA][mM]/

  keyword_plain ::= /[pP][lL][aA][iI][nN]/

  keyword_extended ::= /[eE][xX][tT][eE][nN][dD][eE][dD]/

  keyword_main ::= /[mM][aA][iI][nN]/

  keyword_storage ::= /[sS][tT][oO][rR][aA][gG][eE]/

  keyword_compression ::= /[cC][oO][mM][pP][rR][eE][sS][sS][iI][oO][nN]/

  keyword_trigger ::= /[tT][rR][iI][gG][gG][eE][rR]/

  keyword_function ::= /[fF][uU][nN][cC][tT][iI][oO][nN]/

  keyword_returns ::= /[rR][eE][tT][uU][rR][nN][sS]/

  keyword_return ::= /[rR][eE][tT][uU][rR][nN]/

  keyword_setof ::= /[sS][eE][tT][oO][fF]/

  keyword_atomic ::= /[aA][tT][oO][mM][iI][cC]/

  keyword_declare ::= /[dD][eE][cC][lL][aA][rR][eE]/

  keyword_language ::= /[lL][aA][nN][gG][uU][aA][gG][eE]/

  keyword_sql ::= /[sS][qQ][lL]/

  keyword_plpgsql ::= /[pP][lL][pP][gG][sS][qQ][lL]/

  keyword_immutable ::= /[iI][mM][mM][uU][tT][aA][bB][lL][eE]/

  keyword_stable ::= /[sS][tT][aA][bB][lL][eE]/

  keyword_volatile ::= /[vV][oO][lL][aA][tT][iI][lL][eE]/

  keyword_leakproof ::= /[lL][eE][aA][kK][pP][rR][oO][oO][fF]/

  keyword_parallel ::= /[pP][aA][rR][aA][lL][lL][eE][lL]/

  keyword_safe ::= /[sS][aA][fF][eE]/

  keyword_unsafe ::= /[uU][nN][sS][aA][fF][eE]/

  keyword_restricted ::= /[rR][eE][sS][tT][rR][iI][cC][tT][eE][dD]/

  keyword_called ::= /[cC][aA][lL][lL][eE][dD]/

  keyword_input ::= /[iI][nN][pP][uU][tT]/

  keyword_strict ::= /[sS][tT][rR][iI][cC][tT]/

  keyword_cost ::= /[cC][oO][sS][tT]/

  keyword_support ::= /[sS][uU][pP][pP][oO][rR][tT]/

  keyword_definer ::= /[dD][eE][fF][iI][nN][eE][rR]/

  keyword_invoker ::= /[iI][nN][vV][oO][kK][eE][rR]/

  keyword_security ::= /[sS][eE][cC][uU][rR][iI][tT][yY]/

  keyword_version ::= /[vV][eE][rR][sS][iI][oO][nN]/

  keyword_out ::= /[oO][uU][tT]/

  keyword_inout ::= /[iI][nN][oO][uU][tT]/

  keyword_variadic ::= /[vV][aA][rR][iI][aA][dD][iI][cC]/

  keyword_session ::= /[sS][eE][sS][sS][iI][oO][nN]/

  keyword_isolation ::= /[iI][sS][oO][lL][aA][tT][iI][oO][nN]/

  keyword_level ::= /[lL][eE][vV][eE][lL]/

  keyword_serializable ::= /[sS][eE][rR][iI][aA][lL][iI][zZ][aA][bB][lL][eE]/

  keyword_repeatable ::= /[rR][eE][pP][eE][aA][tT][aA][bB][lL][eE]/

  keyword_read ::= /[rR][eE][aA][dD]/

  keyword_write ::= /[wW][rR][iI][tT][eE]/

  keyword_committed ::= /[cC][oO][mM][mM][iI][tT][tT][eE][dD]/

  keyword_uncommitted ::= /[uU][nN][cC][oO][mM][mM][iI][tT][tT][eE][dD]/

  keyword_deferrable ::= /[dD][eE][fF][eE][rR][rR][aA][bB][lL][eE]/

  keyword_names ::= /[nN][aA][mM][eE][sS]/

  keyword_zone ::= /[zZ][oO][nN][eE]/

  keyword_immediate ::= /[iI][mM][mM][eE][dD][iI][aA][tT][eE]/

  keyword_deferred ::= /[dD][eE][fF][eE][rR][rR][eE][dD]/

  keyword_constraints ::= /[cC][oO][nN][sS][tT][rR][aA][iI][nN][tT][sS]/

  keyword_snapshot ::= /[sS][nN][aA][pP][sS][hH][oO][tT]/

  keyword_characteristics ::= /[cC][hH][aA][rR][aA][cC][tT][eE][rR][iI][sS][tT][iI][cC][sS]/

  keyword_follows ::= /[fF][oO][lL][lL][oO][wW][sS]/

  keyword_precedes ::= /[pP][rR][eE][cC][eE][dD][eE][sS]/

  keyword_each ::= /[eE][aA][cC][hH]/

  keyword_instead ::= /[iI][nN][sS][tT][eE][aA][dD]/

  keyword_of ::= /[oO][fF]/

  keyword_initially ::= /[iI][nN][iI][tT][iI][aA][lL][lL][yY]/

  keyword_old ::= /[oO][lL][dD]/

  keyword_new ::= /[nN][eE][wW]/

  keyword_referencing ::= /[rR][eE][fF][eE][rR][eE][nN][cC][iI][nN][gG]/

  keyword_statement ::= /[sS][tT][aA][tT][eE][mM][eE][nN][tT]/

  keyword_execute ::= /[eE][xX][eE][cC][uU][tT][eE]/

  keyword_procedure ::= /[pP][rR][oO][cC][eE][dD][uU][rR][eE]/

  keyword_external ::= /[eE][xX][tT][eE][rR][nN][aA][lL]/

  keyword_stored ::= /[sS][tT][oO][rR][eE][dD]/

  keyword_virtual ::= /[vV][iI][rR][tT][uU][aA][lL]/

  keyword_cached ::= /[cC][aA][cC][hH][eE][dD]/

  keyword_uncached ::= /[uU][nN][cC][aA][cC][hH][eE][dD]/

  keyword_replication ::= /[rR][eE][pP][lL][iI][cC][aA][tT][iI][oO][nN]/

  keyword_tblproperties ::= /[tT][bB][lL][pP][rR][oO][pP][eE][rR][tT][iI][eE][sS]/

  keyword_options ::= /[oO][pP][tT][iI][oO][nN][sS]/

  keyword_compute ::= /[cC][oO][mM][pP][uU][tT][eE]/

  keyword_stats ::= /[sS][tT][aA][tT][sS]/

  keyword_statistics ::= /[sS][tT][aA][tT][iI][sS][tT][iI][cC][sS]/

  keyword_optimize ::= /[oO][pP][tT][iI][mM][iI][zZ][eE]/

  keyword_rewrite ::= /[rR][eE][wW][rR][iI][tT][eE]/

  keyword_bin_pack ::= /[bB][iI][nN][__][pP][aA][cC][kK]/

  keyword_incremental ::= /[iI][nN][cC][rR][eE][mM][eE][nN][tT][aA][lL]/

  keyword_location ::= /[lL][oO][cC][aA][tT][iI][oO][nN]/

  keyword_partitioned ::= /[pP][aA][rR][tT][iI][tT][iI][oO][nN][eE][dD]/

  keyword_comment ::= /[cC][oO][mM][mM][eE][nN][tT]/

  keyword_sort ::= /[sS][oO][rR][tT]/

  keyword_format ::= /[fF][oO][rR][mM][aA][tT]/

  keyword_delimited ::= /[dD][eE][lL][iI][mM][iI][tT][eE][dD]/

  keyword_delimiter ::= /[dD][eE][lL][iI][mM][iI][tT][eE][rR]/

  keyword_fields ::= /[fF][iI][eE][lL][dD][sS]/

  keyword_terminated ::= /[tT][eE][rR][mM][iI][nN][aA][tT][eE][dD]/

  keyword_escaped ::= /[eE][sS][cC][aA][pP][eE][dD]/

  keyword_lines ::= /[lL][iI][nN][eE][sS]/

  keyword_cache ::= /[cC][aA][cC][hH][eE]/

  keyword_metadata ::= /[mM][eE][tT][aA][dD][aA][tT][aA]/

  keyword_noscan ::= /[nN][oO][sS][cC][aA][nN]/

  keyword_parquet ::= /[pP][aA][rR][qQ][uU][eE][tT]/

  keyword_rcfile ::= /[rR][cC][fF][iI][lL][eE]/

  keyword_csv ::= /[cC][sS][vV]/

  keyword_textfile ::= /[tT][eE][xX][tT][fF][iI][lL][eE]/

  keyword_avro ::= /[aA][vV][rR][oO]/

  keyword_sequencefile ::= /[sS][eE][qQ][uU][eE][nN][cC][eE][fF][iI][lL][eE]/

  keyword_orc ::= /[oO][rR][cC]/

  keyword_jsonfile ::= /[jJ][sS][oO][nN][fF][iI][lL][eE]/

  is_not ::=  <0(  keyword_is keyword_not ) 

  not_like ::= keyword_not keyword_like

  similar_to ::= keyword_similar keyword_to

  not_similar_to ::= keyword_not keyword_similar keyword_to

  distinct_from ::= keyword_is keyword_distinct keyword_from

  not_distinct_from ::= keyword_is keyword_not keyword_distinct keyword_from

  _temporary ::= keyword_temp
	| keyword_temporary

  _not_null ::= keyword_not keyword_null

  _primary_key ::= keyword_primary keyword_key

  _if_exists ::= keyword_if keyword_exists

  _if_not_exists ::= keyword_if keyword_not keyword_exists

  _or_replace ::= keyword_or keyword_replace

  _default_null ::= keyword_default keyword_null

  _current_row ::= keyword_current keyword_row

  _exclude_current_row ::= keyword_exclude keyword_current keyword_row

  _exclude_group ::= keyword_exclude keyword_group

  _exclude_no_others ::= keyword_exclude keyword_no keyword_others

  _exclude_ties ::= keyword_exclude keyword_ties

  _check_option ::= keyword_check keyword_option

  direction ::= keyword_desc
	| keyword_asc

  keyword_null ::= /[nN][uU][lL][lL]/

  keyword_true ::= /[tT][rR][uU][eE]/

  keyword_false ::= /[fF][aA][lL][sS][eE]/

  keyword_boolean ::= /[bB][oO][oO][lL][eE][aA][nN]/

  keyword_bit ::= /[bB][iI][tT]/

  keyword_binary ::= /[bB][iI][nN][aA][rR][yY]/

  keyword_varbinary ::= /[vV][aA][rR][bB][iI][nN][aA][rR][yY]/

  keyword_image ::= /[iI][mM][aA][gG][eE]/

  keyword_smallserial ::= /[sS][mM][aA][lL][lL][sS][eE][rR][iI][aA][lL]/
	| /[sS][eE][rR][iI][aA][lL][22]/

  keyword_serial ::= /[sS][eE][rR][iI][aA][lL]/
	| /[sS][eE][rR][iI][aA][lL][44]/

  keyword_bigserial ::= /[bB][iI][gG][sS][eE][rR][iI][aA][lL]/
	| /[sS][eE][rR][iI][aA][lL][88]/

  keyword_tinyint ::= /[tT][iI][nN][yY][iI][nN][tT]/
	| /[iI][nN][tT][11]/

  keyword_smallint ::= /[sS][mM][aA][lL][lL][iI][nN][tT]/
	| /[iI][nN][tT][22]/

  keyword_mediumint ::= /[mM][eE][dD][iI][uU][mM][iI][nN][tT]/
	| /[iI][nN][tT][33]/

  keyword_int ::= /[iI][nN][tT]/
	| /[iI][nN][tT][eE][gG][eE][rR]/
	| /[iI][nN][tT][44]/

  keyword_bigint ::= /[bB][iI][gG][iI][nN][tT]/
	| /[iI][nN][tT][88]/

  keyword_decimal ::= /[dD][eE][cC][iI][mM][aA][lL]/

  keyword_numeric ::= /[nN][uU][mM][eE][rR][iI][cC]/

  keyword_real ::= /[rR][eE][aA][lL]/
	| /[fF][lL][oO][aA][tT][44]/

  keyword_float ::= /[fF][lL][oO][aA][tT]/

  keyword_double ::= /[dD][oO][uU][bB][lL][eE]/

  keyword_precision ::= /[pP][rR][eE][cC][iI][sS][iI][oO][nN]/

  keyword_inet ::= /[iI][nN][eE][tT]/

  keyword_money ::= /[mM][oO][nN][eE][yY]/

  keyword_smallmoney ::= /[sS][mM][aA][lL][lL][mM][oO][nN][eE][yY]/

  keyword_varying ::= /[vV][aA][rR][yY][iI][nN][gG]/

  keyword_char ::= /[cC][hH][aA][rR]/
	| /[cC][hH][aA][rR][aA][cC][tT][eE][rR]/

  keyword_nchar ::= /[nN][cC][hH][aA][rR]/

  keyword_varchar ::= /[vV][aA][rR][cC][hH][aA][rR]/
	| /[cC][hH][aA][rR][aA][cC][tT][eE][rR]/ keyword_varying

  keyword_nvarchar ::= /[nN][vV][aA][rR][cC][hH][aA][rR]/

  keyword_text ::= /[tT][eE][xX][tT]/

  keyword_string ::= /[sS][tT][rR][iI][nN][gG]/

  keyword_uuid ::= /[uU][uU][iI][dD]/

  keyword_json ::= /[jJ][sS][oO][nN]/

  keyword_jsonb ::= /[jJ][sS][oO][nN][bB]/

  keyword_xml ::= /[xX][mM][lL]/

  keyword_bytea ::= /[bB][yY][tT][eE][aA]/

  keyword_enum ::= /[eE][nN][uU][mM]/

  keyword_date ::= /[dD][aA][tT][eE]/

  keyword_datetime ::= /[dD][aA][tT][eE][tT][iI][mM][eE]/

  keyword_datetime2 ::= /[dD][aA][tT][eE][tT][iI][mM][eE][22]/

  keyword_smalldatetime ::= /[sS][mM][aA][lL][lL][dD][aA][tT][eE][tT][iI][mM][eE]/

  keyword_datetimeoffset ::= /[dD][aA][tT][eE][tT][iI][mM][eE][oO][fF][fF][sS][eE][tT]/

  keyword_time ::= /[tT][iI][mM][eE]/

  keyword_timestamp ::= /[tT][iI][mM][eE][sS][tT][aA][mM][pP]/

  keyword_timestamptz ::= /[tT][iI][mM][eE][sS][tT][aA][mM][pP][tT][zZ]/

  keyword_interval ::= /[iI][nN][tT][eE][rR][vV][aA][lL]/

  keyword_geometry ::= /[gG][eE][oO][mM][eE][tT][rR][yY]/

  keyword_geography ::= /[gG][eE][oO][gG][rR][aA][pP][hH][yY]/

  keyword_box2d ::= /[bB][oO][xX][22][dD]/

  keyword_box3d ::= /[bB][oO][xX][33][dD]/

  keyword_oid ::= /[oO][iI][dD]/

  keyword_oids ::= /[oO][iI][dD][sS]/

  keyword_name ::= /[nN][aA][mM][eE]/

  keyword_regclass ::= /[rR][eE][gG][cC][lL][aA][sS][sS]/

  keyword_regnamespace ::= /[rR][eE][gG][nN][aA][mM][eE][sS][pP][aA][cC][eE]/

  keyword_regproc ::= /[rR][eE][gG][pP][rR][oO][cC]/

  keyword_regtype ::= /[rR][eE][gG][tT][yY][pP][eE]/

  keyword_array ::= /[aA][rR][rR][aA][yY]/

  _type ::=  <0(  ( keyword_boolean | bit | binary | varbinary | keyword_image | keyword_smallserial | keyword_serial | keyword_bigserial | tinyint | smallint | mediumint | int | bigint | decimal | numeric | double | float | keyword_money | keyword_smallmoney | char | varchar | nchar | nvarchar | numeric | keyword_string | keyword_text | keyword_uuid | keyword_json | keyword_jsonb | keyword_xml | keyword_bytea | keyword_inet | enum | keyword_date | keyword_datetime | keyword_datetime2 | datetimeoffset | keyword_smalldatetime | time | timestamp | keyword_timestamptz | keyword_interval | keyword_geometry | keyword_geography | keyword_box2d | keyword_box3d | keyword_oid | keyword_name | keyword_regclass | keyword_regnamespace | keyword_regproc | keyword_regtype | object_reference:custom_type ) array_size_definition? ) 

  array_size_definition ::=  <0(  keyword_array _array_size_definition? | _array_size_definition+ ) 

  _array_size_definition ::= '[' ( ( _integer -> literal ):size )? ']'

  tinyint ::= keyword_unsigned  >1(  keyword_tinyint | keyword_tinyint '(' ( _natural_number -> literal ):size ')' ) 
	|  >1(  keyword_tinyint | keyword_tinyint '(' ( _natural_number -> literal ):size ')' )  keyword_unsigned? keyword_zerofill?

  smallint ::= keyword_unsigned  >1(  keyword_smallint | keyword_smallint '(' ( _natural_number -> literal ):size ')' ) 
	|  >1(  keyword_smallint | keyword_smallint '(' ( _natural_number -> literal ):size ')' )  keyword_unsigned? keyword_zerofill?

  mediumint ::= keyword_unsigned  >1(  keyword_mediumint | keyword_mediumint '(' ( _natural_number -> literal ):size ')' ) 
	|  >1(  keyword_mediumint | keyword_mediumint '(' ( _natural_number -> literal ):size ')' )  keyword_unsigned? keyword_zerofill?

  int ::= keyword_unsigned  >1(  keyword_int | keyword_int '(' ( _natural_number -> literal ):size ')' ) 
	|  >1(  keyword_int | keyword_int '(' ( _natural_number -> literal ):size ')' )  keyword_unsigned? keyword_zerofill?

  bigint ::= keyword_unsigned  >1(  keyword_bigint | keyword_bigint '(' ( _natural_number -> literal ):size ')' ) 
	|  >1(  keyword_bigint | keyword_bigint '(' ( _natural_number -> literal ):size ')' )  keyword_unsigned? keyword_zerofill?

  bit ::= keyword_bit
	| keyword_bit  0(   >1(  keyword_varying | keyword_varying '(' ( _natural_number -> literal ):precision ')' )  ) 
	|  1(   >1(  keyword_bit | keyword_bit '(' ( _natural_number -> literal ):precision ')' )  ) 

  binary ::=  >1(  keyword_binary | keyword_binary '(' ( _natural_number -> literal ):precision ')' ) 

  varbinary ::=  >1(  keyword_varbinary | keyword_varbinary '(' ( _natural_number -> literal ):precision ')' ) 

  float ::=  >1(  keyword_float | keyword_float '(' ( _natural_number -> literal ):precision ')' ) 
	| keyword_unsigned  >1(  keyword_float | keyword_float '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 
	|  >1(  keyword_float | keyword_float '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' )  keyword_unsigned? keyword_zerofill?

  double ::= /[fF][lL][oO][aA][tT][88]/
	| keyword_unsigned  >1(  keyword_double | keyword_double '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 
	|  >1(  keyword_double | keyword_double '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' )  keyword_unsigned? keyword_zerofill?
	| keyword_unsigned  >1(  keyword_double keyword_precision | keyword_double keyword_precision '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 
	|  >1(  keyword_double keyword_precision | keyword_double keyword_precision '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' )  keyword_unsigned? keyword_zerofill?
	| keyword_unsigned  >1(  keyword_real | keyword_real '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 
	|  >1(  keyword_real | keyword_real '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' )  keyword_unsigned? keyword_zerofill?

  decimal ::=  >1(  keyword_decimal | keyword_decimal '(' ( _natural_number -> literal ):precision ')' ) 
	|  >1(  keyword_decimal | keyword_decimal '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 

  numeric ::=  >1(  keyword_numeric | keyword_numeric '(' ( _natural_number -> literal ):precision ')' ) 
	|  >1(  keyword_numeric | keyword_numeric '(' ( _natural_number -> literal ):precision ',' ( _natural_number -> literal ):scale ')' ) 

  char ::=  >1(  keyword_char | keyword_char '(' ( _natural_number -> literal ):size ')' ) 

  varchar ::=  >1(  keyword_varchar | keyword_varchar '(' ( _natural_number -> literal ):size ')' ) 

  nchar ::=  >1(  keyword_nchar | keyword_nchar '(' ( _natural_number -> literal ):size ')' ) 

  nvarchar ::=  >1(  keyword_nvarchar | keyword_nvarchar '(' ( _natural_number -> literal ):size ')' ) 

  _include_time_zone ::= ( keyword_with | keyword_without ) keyword_time keyword_zone

  datetimeoffset ::=  >1(  keyword_datetimeoffset | keyword_datetimeoffset '(' ( _natural_number -> literal ):size ')' ) 

  time ::=  >1(  keyword_time | keyword_time '(' ( _natural_number -> literal ):size ')' )  _include_time_zone?

  timestamp ::=  >1(  keyword_timestamp | keyword_timestamp '(' ( _natural_number -> literal ):size ')' )  _include_time_zone?

  timestamptz ::=  >1(  keyword_timestamptz | keyword_timestamptz '(' ( _natural_number -> literal ):size ')' ) 

  enum ::= keyword_enum '(' ( _literal_string -> literal ):value ( ',' ( _literal_string -> literal ):value )* ')'

  array ::= keyword_array ( '[' ( _expression ( ',' _expression )* )? ']' | '(' _dml_read ')' )

  comment ::= /--.*/

  marginalia ::= /\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//

  transaction ::= keyword_begin keyword_transaction? ';'? ( statement ';' )* ( _commit | _rollback )

  _commit ::= keyword_commit keyword_transaction?

  _rollback ::= keyword_rollback keyword_transaction?

  block ::= keyword_begin ';'? ( statement ';' )* keyword_end

  statement ::= ( keyword_explain keyword_analyze? keyword_verbose? )? ( _ddl_statement | _dml_write |  >0(  _dml_read | '(' _dml_read ')' )  )

  _ddl_statement ::= _create_statement
	| _alter_statement
	| _drop_statement
	| _rename_statement
	| _optimize_statement
	| _merge_statement
	| comment_statement
	| set_statement
	| reset_statement

  _cte ::= keyword_with keyword_recursive? cte ( ',' cte )*

  _dml_write ::= _cte? ( _delete_statement | _insert_statement | _update_statement | _truncate_statement | _copy_statement )

  _dml_read ::=  >0(  _cte | '(' _cte ')' ) ?  >0(  _select_statement | set_operation | '(' ( _select_statement | set_operation ) ')' ) 

  cte ::= identifier ( '(' ( identifier:argument ( ',' identifier:argument )* )? ')' )? keyword_as ( keyword_not? keyword_materialized )? '(' ( _dml_read | _dml_write ) -> statement ')'

  set_operation ::= _select_statement ( ( keyword_union keyword_all? | keyword_except | keyword_intersect ):operation _select_statement )+

  _select_statement ::=  >0(  select from? | '(' select from? ')' ) 

  comment_statement ::= keyword_comment keyword_on _comment_target keyword_is ( keyword_null | _literal_string -> literal )

  _argmode ::= keyword_in
	| keyword_out
	| keyword_inout
	| keyword_variadic
	| keyword_in keyword_out

  function_argument ::= _argmode? identifier? _type ( ( keyword_default | '=' ) literal )?

  function_arguments ::= '(' ( function_argument ( ',' function_argument )* )? ')'

  _comment_target ::= cast
	| keyword_column _qualified_field -> object_reference
	| keyword_database identifier
	| keyword_extension object_reference
	| keyword_function object_reference function_arguments?
	| keyword_index object_reference
	| keyword_materialized keyword_view object_reference
	| keyword_role identifier
	| keyword_schema identifier
	| keyword_sequence object_reference
	| keyword_table object_reference
	| keyword_tablespace identifier
	| keyword_trigger identifier keyword_on object_reference
	| keyword_type identifier
	| keyword_view object_reference

  select ::= keyword_select keyword_distinct? select_expression

  select_expression ::= term ( ',' term )*

  term ::= ( all_fields | _expression ):value _alias?

  _truncate_statement ::= keyword_truncate keyword_table? keyword_only? ( object_reference ( ',' object_reference )* )? _drop_behavior?

  _delete_statement ::= delete _delete_from -> from returning?

  _delete_from ::= keyword_from keyword_only? object_reference where? order_by? limit?

  delete ::= keyword_delete index_hint?

  _create_statement ::= ( create_table | create_view | create_materialized_view | create_index | create_function | create_type | create_database | create_role | create_sequence | create_extension | create_trigger |  <0(  create_schema _create_statement* )  )

  _table_settings ::= table_partition
	| stored_as
	| storage_location
	| table_sort
	| row_format
	| keyword_tblproperties '(' table_option ( ',' table_option )* ')'
	| keyword_without keyword_oids
	| storage_parameters
	| table_option

  storage_parameters ::= keyword_with '(' identifier ( '=' literal )? ( ',' identifier ( '=' literal )? )* ')'

  create_table ::=  <0(  keyword_create ( _temporary | keyword_unlogged | keyword_external )? keyword_table _if_not_exists? object_reference ( column_definitions _table_settings* ( keyword_as _select_statement )? | _table_settings* keyword_as create_query ) ) 

  reset_statement ::= keyword_reset ( object_reference | keyword_all | keyword_session keyword_authorization | keyword_role )

  _transaction_mode ::= keyword_isolation keyword_level ( keyword_serializable | keyword_repeatable keyword_read | keyword_read keyword_committed | keyword_read keyword_uncommitted ) ( keyword_read keyword_write | keyword_read keyword_only ) keyword_not? keyword_deferrable

  set_statement ::= keyword_set ( ( keyword_session | keyword_local )? ( object_reference ( keyword_to | '=' ) ( literal | keyword_default | identifier | keyword_on | keyword_off ) | keyword_schema literal | keyword_names literal | keyword_time keyword_zone ( literal | keyword_local | keyword_default ) | keyword_session keyword_authorization ( identifier | keyword_default ) | keyword_role ( identifier | keyword_none ) ) | keyword_constraints ( keyword_all | identifier ( ',' identifier )* ) ( keyword_deferred | keyword_immediate ) | keyword_transaction _transaction_mode | keyword_transaction keyword_snapshot _transaction_mode | keyword_session keyword_characteristics keyword_as keyword_transaction _transaction_mode )

  create_query ::= _dml_read

  create_view ::=  >0(  keyword_create _or_replace? _temporary? keyword_recursive? keyword_view _if_not_exists? object_reference ( '(' ( identifier ( ',' identifier )* )? ')' )? keyword_as create_query ( keyword_with ( keyword_local | keyword_cascaded )? _check_option )? ) 

  create_materialized_view ::=  >0(  keyword_create _or_replace? keyword_materialized keyword_view _if_not_exists? object_reference keyword_as create_query ( keyword_with keyword_data | keyword_with keyword_no keyword_data )? ) 

  dollar_quote ::= /\$[^\$]*\$/

  create_function ::= keyword_create _or_replace? keyword_function object_reference function_arguments keyword_returns ( _type | keyword_setof _type | keyword_table column_definitions | keyword_trigger ) ( function_language | function_volatility | function_leakproof | function_security | function_safety | function_strictness | function_cost | function_rows | function_support )* function_body ( function_language | function_volatility | function_leakproof | function_security | function_safety | function_strictness | function_cost | function_rows | function_support )*

  _function_return ::= keyword_return _expression

  function_declaration ::= identifier _type ( ':=' ( '(' statement ')' | literal ) )? ';'

  _function_body_statement ::= statement
	| _function_return

  function_body ::= _function_return ';'
	| keyword_begin keyword_atomic ( _function_body_statement ';' )+ keyword_end
	| keyword_as _dollar_quoted_string_start_tag -> dollar_quote ( keyword_declare function_declaration+ )? keyword_begin ( _function_body_statement ';' )+ keyword_end ';'? _dollar_quoted_string_end_tag -> dollar_quote
	| keyword_as ( _single_quote_string | _double_quote_string ) -> literal
	| keyword_as _dollar_quoted_string_start_tag -> dollar_quote _function_body_statement ';'? _dollar_quoted_string_end_tag -> dollar_quote

  function_language ::= keyword_language identifier

  function_volatility ::= keyword_immutable
	| keyword_stable
	| keyword_volatile

  function_leakproof ::= keyword_not? keyword_leakproof

  function_security ::= keyword_external? keyword_security ( keyword_invoker | keyword_definer )

  function_safety ::= keyword_parallel ( keyword_safe | keyword_unsafe | keyword_restricted )

  function_strictness ::= ( keyword_called | keyword_returns keyword_null ) keyword_on keyword_null keyword_input
	| keyword_strict

  function_cost ::= keyword_cost _natural_number

  function_rows ::= keyword_rows _natural_number

  function_support ::= keyword_support _literal_string -> literal

  _operator_class ::= identifier:opclass ( ( '(' ( term ( ',' term )* )? ')' ):opclass_parameters )?

  _index_field ::= ( ( '(' _expression ')' ):expression | invocation:function | _column:column ) ( keyword_collate identifier )? _operator_class? direction? ( keyword_nulls ( keyword_first | keyword_last ) )?

  index_fields ::= '(' ( _index_field -> field ( ',' _index_field -> field )* )? ')'

  create_index ::= keyword_create keyword_unique? keyword_index keyword_concurrently? ( _if_not_exists? _column:column )? keyword_on keyword_only? object_reference ( keyword_using ( keyword_btree | keyword_hash | keyword_gist | keyword_spgist | keyword_gin | keyword_brin ) )? index_fields where?

  create_schema ::=  <0(  keyword_create keyword_schema ( _if_not_exists? identifier ( keyword_authorization identifier )? | keyword_authorization identifier ) ) 

  _with_settings ::= identifier:name '='? ( identifier | _single_quote_string -> literal ):value

  create_database ::= keyword_create keyword_database _if_not_exists? identifier keyword_with? _with_settings*

  create_role ::= keyword_create ( keyword_user | keyword_role | keyword_group ) identifier keyword_with? ( _user_access_role_config | _role_options )*

  _role_options ::= identifier:option
	| keyword_valid keyword_until ( _literal_string -> literal ):valid_until
	| keyword_connection keyword_limit ( _integer -> literal ):connection_limit
	| keyword_encrypted? keyword_password ( ( _literal_string -> literal ):password | keyword_null )

  _user_access_role_config ::= ( keyword_in? keyword_role | keyword_in keyword_group | keyword_admin | keyword_user ) identifier ( ',' identifier )*

  create_sequence ::= keyword_create ( keyword_temporary | keyword_temp | keyword_unlogged )? keyword_sequence _if_not_exists? object_reference ( keyword_as _type | keyword_increment keyword_by? ( _integer -> literal ):increment | keyword_minvalue ( literal | keyword_no keyword_minvalue ) | keyword_no keyword_minvalue | keyword_maxvalue ( literal | keyword_no keyword_maxvalue ) | keyword_no keyword_maxvalue | keyword_start keyword_with? ( _integer -> literal ):start | keyword_cache ( _integer -> literal ):cache | keyword_no? keyword_cycle | keyword_owned keyword_by ( keyword_none | object_reference ) )*

  create_extension ::= keyword_create keyword_extension _if_not_exists? identifier keyword_with? ( keyword_schema identifier )? ( keyword_version ( identifier | _literal_string -> literal ) )? keyword_cascade?

  create_trigger ::= keyword_create _or_replace? ( keyword_definer '=' identifier )? keyword_constraint? _temporary? keyword_trigger _if_not_exists? object_reference ( keyword_before | keyword_after | keyword_instead keyword_of ) _create_trigger_event ( keyword_or _create_trigger_event )* keyword_on object_reference ( keyword_from object_reference | keyword_not keyword_deferrable | keyword_deferrable | keyword_initially keyword_immediate | keyword_initially keyword_deferred | keyword_referencing ( keyword_old | keyword_new ) keyword_table keyword_as? identifier | keyword_for keyword_each? ( keyword_row | keyword_statement ) ( ( keyword_follows | keyword_precedes ) identifier )? | keyword_when '(' _expression ')' )* keyword_execute ( keyword_function | keyword_procedure ) object_reference '(' ( term:parameter ( ',' term:parameter )* )? ')'

  _create_trigger_event ::= keyword_insert
	| keyword_update ( keyword_of identifier ( ',' identifier )* )?
	| keyword_delete
	| keyword_truncate

  create_type ::= keyword_create keyword_type object_reference ( ( keyword_as column_definitions ( keyword_collate identifier )? | keyword_as keyword_enum enum_elements | ( keyword_as keyword_range )? '(' ( _with_settings ( ',' _with_settings )* )? ')' ) )?

  enum_elements ::= '(' ( ( _literal_string -> literal ):enum_element ( ',' ( _literal_string -> literal ):enum_element )* )? ')'

  _alter_statement ::= ( alter_table | alter_view | alter_schema | alter_type | alter_index | alter_database | alter_role | alter_sequence )

  _rename_statement ::= keyword_rename ( keyword_table | keyword_tables ) _if_exists? object_reference ( keyword_nowait | keyword_wait ( _natural_number -> literal ):timeout )? keyword_to object_reference ( ',' _rename_table_names )*

  _rename_table_names ::= object_reference keyword_to object_reference

  alter_table ::= keyword_alter keyword_table _if_exists? keyword_only? object_reference ( _alter_specifications ( ',' _alter_specifications )* )

  _alter_specifications ::= add_column
	| add_constraint
	| alter_column
	| modify_column
	| change_column
	| drop_column
	| rename_object
	| rename_column
	| set_schema
	| change_ownership

  add_column ::= keyword_add? keyword_column? _if_not_exists? column_definition column_position?

  add_constraint ::= keyword_add keyword_constraint? identifier constraint

  alter_column ::= keyword_alter keyword_column? identifier:name ( ( keyword_set | keyword_drop ) keyword_not keyword_null | ( keyword_set keyword_data )? keyword_type _type:type | keyword_set ( keyword_statistics _integer:statistics | keyword_storage ( keyword_plain | keyword_external | keyword_extended | keyword_main | keyword_default ) | keyword_compression _identifier:compression_method | '(' _key_value_pair ( ',' _key_value_pair )* ')' | keyword_default _expression ) | keyword_drop keyword_default )

  modify_column ::= keyword_modify keyword_column? _if_exists? column_definition column_position?

  change_column ::= keyword_change keyword_column? _if_exists? identifier:old_name column_definition column_position?

  column_position ::= keyword_first
	| keyword_after identifier:col_name

  drop_column ::= keyword_drop keyword_column? _if_exists? identifier:name

  rename_column ::= keyword_rename keyword_column? identifier:old_name keyword_to identifier:new_name

  alter_view ::= keyword_alter keyword_view _if_exists? object_reference ( rename_object | rename_column | set_schema | change_ownership )

  alter_schema ::= keyword_alter keyword_schema identifier ( keyword_rename | keyword_owner ) keyword_to identifier

  alter_database ::= keyword_alter keyword_database identifier keyword_with? ( rename_object | change_ownership | keyword_reset ( keyword_all | identifier:configuration_parameter ) | keyword_set ( keyword_tablespace identifier | set_configuration ) )

  alter_role ::= keyword_alter ( keyword_role | keyword_group | keyword_user ) ( identifier | keyword_all ) ( rename_object | keyword_with? _role_options* | ( keyword_in keyword_database identifier )? ( keyword_set set_configuration | keyword_reset ( keyword_all | identifier:option ) ) )

  set_configuration ::= identifier:option ( keyword_from keyword_current | ( keyword_to | '=' ) ( identifier:parameter | literal | keyword_default ) )

  alter_index ::= keyword_alter keyword_index _if_exists? identifier ( rename_object | keyword_alter keyword_column? _natural_number -> literal keyword_set keyword_statistics _natural_number -> literal | keyword_reset '(' ( identifier ( ',' identifier )* )? ')' | keyword_set ( keyword_tablespace identifier | '(' ( identifier '=' literal:value ( ',' identifier '=' literal:value )* )? ')' ) )

  alter_sequence ::= keyword_alter keyword_sequence _if_exists? object_reference ( ( keyword_as _type | keyword_increment keyword_by? literal | keyword_minvalue ( literal | keyword_no keyword_minvalue ) | keyword_maxvalue ( literal | keyword_no keyword_maxvalue ) | keyword_start keyword_with? ( _integer -> literal ):start | keyword_restart keyword_with? ( _integer -> literal ):restart | keyword_cache ( _integer -> literal ):cache | keyword_no? keyword_cycle | keyword_owned keyword_by ( keyword_none | object_reference ) )+ | rename_object | change_ownership | keyword_set ( keyword_logged | keyword_unlogged | keyword_schema identifier ) )

  alter_type ::= keyword_alter keyword_type identifier ( change_ownership | set_schema | rename_object | keyword_rename keyword_attribute identifier keyword_to identifier _drop_behavior? | keyword_add keyword_value _if_not_exists? _single_quote_string -> literal ( ( keyword_before | keyword_after ) _single_quote_string -> literal )? | keyword_rename keyword_value _single_quote_string -> literal keyword_to _single_quote_string -> literal | ( keyword_add keyword_attribute identifier _type | keyword_drop keyword_attribute _if_exists? identifier | keyword_alter keyword_attribute identifier ( keyword_set keyword_data )? keyword_type _type ) ( keyword_collate identifier )? _drop_behavior? )

  _drop_behavior ::= keyword_cascade
	| keyword_restrict

  _drop_statement ::= ( drop_table | drop_view | drop_index | drop_type | drop_schema | drop_database | drop_role | drop_sequence | drop_extension )

  drop_table ::= keyword_drop keyword_table _if_exists? object_reference _drop_behavior?

  drop_view ::= keyword_drop keyword_view _if_exists? object_reference _drop_behavior?

  drop_schema ::= keyword_drop keyword_schema _if_exists? identifier _drop_behavior?

  drop_database ::= keyword_drop keyword_database _if_exists? identifier keyword_with? keyword_force?

  drop_role ::= keyword_drop ( keyword_group | keyword_role | keyword_user ) _if_exists? identifier

  drop_type ::= keyword_drop keyword_type _if_exists? object_reference _drop_behavior?

  drop_sequence ::= keyword_drop keyword_sequence _if_exists? object_reference _drop_behavior?

  drop_index ::= keyword_drop keyword_index keyword_concurrently? _if_exists? identifier:name _drop_behavior? ( keyword_on object_reference )?

  drop_extension ::= keyword_drop keyword_extension _if_exists? identifier ( ',' identifier )* ( keyword_cascade | keyword_restrict )?

  rename_object ::= keyword_rename keyword_to object_reference

  set_schema ::= keyword_set keyword_schema identifier:schema

  change_ownership ::= keyword_owner keyword_to identifier

  object_reference ::= ( identifier:schema '.' )? identifier:name

  _copy_statement ::= keyword_copy object_reference _column_list keyword_from ( keyword_stdin | _literal_string -> "filename" | keyword_program _literal_string -> "command" ) keyword_with? '(' ( keyword_format ( keyword_csv | keyword_binary | keyword_text ) | keyword_freeze ( keyword_true | keyword_false ) | keyword_header ( keyword_true | keyword_false | keyword_match ) | ( keyword_delimiter | keyword_null | keyword_default | keyword_escape | keyword_quote | keyword_encoding ) _literal_string -> identifier | ( keyword_force_null | keyword_force_not_null | keyword_force_quote ) _column_list )+ ')' where?

  _insert_statement ::= insert returning?

  insert ::= ( keyword_insert | keyword_replace ) ( keyword_low_priority | keyword_delayed | keyword_high_priority )? keyword_ignore? ( keyword_into | keyword_overwrite )? object_reference table_partition? ( keyword_as identifier:alias )? ( _insert_values | _set_values ) ( keyword_on keyword_conflict keyword_do ( keyword_nothing | keyword_update _set_values where? ) )?

  _insert_values ::= ( _column_list -> list )? ( keyword_values list ( ',' list )* | _dml_read )

  _set_values ::= keyword_set assignment ( ',' assignment )*

  _column_list ::= '(' _column -> column ( ',' _column -> column )* ')'

  _column ::= identifier
	| _literal_string -> literal

  _update_statement ::= update returning?

  _merge_statement ::= keyword_merge keyword_into object_reference _alias? keyword_using ( subquery | object_reference ) _alias? keyword_on  >0(  _expression:predicate | '(' _expression:predicate ')' )  when_clause+

  when_clause ::= keyword_when keyword_not? keyword_matched ( keyword_and  >0(  _expression:predicate | '(' _expression:predicate ')' )  )? keyword_then ( keyword_delete | keyword_update _set_values | keyword_insert _insert_values | where? )

  _optimize_statement ::= _compute_stats
	| _vacuum_table
	| _optimize_table

  _compute_stats ::= keyword_analyze keyword_table object_reference _partition_spec? keyword_compute keyword_statistics ( keyword_for keyword_columns )? ( keyword_cache keyword_metadata )? keyword_noscan?
	| keyword_compute keyword_incremental? keyword_stats object_reference ( '(' ( field+ ( ',' field+ )* )? ')' | _partition_spec )?

  _optimize_table ::= keyword_optimize object_reference keyword_rewrite keyword_data keyword_using keyword_bin_pack where?
	| keyword_optimize ( keyword_local )? keyword_table object_reference ( ',' object_reference )*

  _vacuum_table ::= keyword_vacuum _vacuum_option? object_reference ( '(' ( field ( ',' field )* )? ')' )?

  _vacuum_option ::= keyword_full ( keyword_true | keyword_false )?
	| keyword_parallel ( keyword_true | keyword_false )?
	| keyword_analyze ( keyword_true | keyword_false )?

  _partition_spec ::= keyword_partition '(' table_option ( ',' table_option )* ')'

  update ::= keyword_update keyword_only? ( _mysql_update_statement | _postgres_update_statement )

  _mysql_update_statement ::=  0(  relation ( ',' relation )* join* _set_values where? ) 

  _postgres_update_statement ::=  1(  relation _set_values from? ) 

  storage_location ::=  >0(  keyword_location ( _literal_string -> literal ):path ( keyword_cached keyword_in ( _literal_string -> literal ):pool ( keyword_uncached | keyword_with keyword_replication '=' ( _natural_number -> literal ):value )? )? ) 

  row_format ::= keyword_row keyword_format keyword_delimited ( keyword_fields keyword_terminated keyword_by ( _literal_string -> literal ):fields_terminated_char ( keyword_escaped keyword_by ( _literal_string -> literal ):escaped_char )? )? ( keyword_lines keyword_terminated keyword_by ( _literal_string -> literal ):row_terminated_char )?

  table_sort ::= keyword_sort keyword_by '(' identifier ( ',' identifier )* ')'

  table_partition ::= ( keyword_partition keyword_by ( keyword_range | keyword_hash ) | keyword_partitioned keyword_by | keyword_partition ) ( '(' ( identifier ( ',' identifier )* )? ')' | column_definitions | '(' _key_value_pair ( ',' _key_value_pair )* ')' )

  _key_value_pair ::= identifier:key '=' ( _literal_string -> literal ):value

  stored_as ::= keyword_stored keyword_as ( keyword_parquet | keyword_csv | keyword_sequencefile | keyword_textfile | keyword_rcfile | keyword_orc | keyword_avro | keyword_jsonfile )

  assignment ::= ( _qualified_field -> field ):left '=' _expression:right

  table_option ::= keyword_default keyword_character keyword_set identifier
	| keyword_collate identifier
	| keyword_default:name
	| ( keyword_engine | identifier | _literal_string ):name '=' ( identifier | _literal_string ):value

  column_definitions ::= '(' column_definition ( ',' column_definition )* constraints? ')'

  column_definition ::= _column:name _type:type _column_constraint*

  _column_comment ::= keyword_comment _literal_string -> literal

  _column_constraint ::=  <0(  keyword_null | _not_null | keyword_references object_reference '(' identifier ( ',' identifier )* ')' ( keyword_on ( keyword_delete | keyword_update ) ( keyword_no keyword_action | keyword_restrict | keyword_cascade | keyword_set ( keyword_null | keyword_default ) ( '(' identifier ( ',' identifier )* ')' )? ) )* | _default_expression | _primary_key | keyword_auto_increment | direction | _column_comment | _check_constraint | ( keyword_generated keyword_always )? keyword_as _expression | keyword_stored | keyword_virtual | keyword_unique ) 

  _check_constraint ::= ( keyword_constraint literal )? keyword_check '(' binary_expression ')'

  _default_expression ::= keyword_default  >0(  _inner_default_expression | '(' _inner_default_expression ')' ) 

  _inner_default_expression ::= literal
	| list
	| cast
	| binary_expression
	| unary_expression
	| array
	| invocation
	| keyword_current_timestamp
	| implicit_cast -> cast

  constraints ::= ',' constraint ( ',' constraint )*

  constraint ::= _constraint_literal
	| _key_constraint
	| _primary_key_constraint
	| _check_constraint

  _constraint_literal ::= keyword_constraint identifier:name ( _primary_key ordered_columns | _check_constraint )

  _primary_key_constraint ::= _primary_key ordered_columns

  _key_constraint ::= ( keyword_unique ( keyword_index | keyword_key | keyword_nulls keyword_not? keyword_distinct )? | keyword_foreign? keyword_key _if_not_exists? | keyword_index ) ( identifier:name )? ordered_columns ( keyword_references object_reference '(' identifier ( ',' identifier )* ')' ( keyword_on ( keyword_delete | keyword_update ) ( keyword_no keyword_action | keyword_restrict | keyword_cascade | keyword_set ( keyword_null | keyword_default ) ( '(' identifier ( ',' identifier )* ')' )? ) )* )?

  ordered_columns ::= '(' ordered_column -> column ( ',' ordered_column -> column )* ')'

  ordered_column ::= _column:name direction?

  all_fields ::= ( object_reference '.' )? '*'

  parameter ::= /\?|(\$[0-9]+)/

  case ::= keyword_case ( _expression keyword_when _expression keyword_then _expression ( keyword_when _expression keyword_then _expression )* | keyword_when _expression keyword_then _expression ( keyword_when _expression keyword_then _expression )* ) ( keyword_else _expression )? keyword_end

  field ::= identifier:name

  _qualified_field ::= (  >0(  object_reference | '(' object_reference ')' )  '.' )? identifier:name

  implicit_cast ::= _expression '::' _type

  interval ::= keyword_interval _literal_string

  cast ::= keyword_cast:name '(' _expression:parameter keyword_as _type ')'

  filter_expression ::= keyword_filter '(' where ')'

  invocation ::=  1(  object_reference ( '(' ( keyword_distinct? term:parameter order_by? ( ',' keyword_distinct? term:parameter order_by? )* )? ')' | '(' keyword_distinct? term:parameter order_by? ( ( keyword_separator | ',' ) _literal_string -> literal )? limit? ')' ) filter_expression? ) 

  exists ::= keyword_exists subquery

  partition_by ::= keyword_partition keyword_by _expression ( ',' _expression )*

  frame_definition ::= ( keyword_unbounded keyword_preceding | ( identifier | binary_expression | _literal_string -> literal | _integer -> literal ):start keyword_preceding | _current_row | ( identifier | binary_expression | _literal_string -> literal | _integer -> literal ):end keyword_following | keyword_unbounded keyword_following )

  window_frame ::= ( keyword_range | keyword_rows | keyword_groups ) ( keyword_between frame_definition ( keyword_and frame_definition )? | frame_definition ) ( _exclude_current_row | _exclude_group | _exclude_ties | _exclude_no_others )?

  window_clause ::= keyword_window identifier keyword_as window_specification

  window_specification ::= '(' partition_by? order_by? window_frame? ')'

  window_function ::= invocation keyword_over ( identifier | window_specification )

  _alias ::= keyword_as? identifier:alias

  from ::= keyword_from keyword_only? relation ( ',' relation )* index_hint? ( join | cross_join | lateral_join | lateral_cross_join )* where? group_by? window_clause? order_by? limit?

  relation ::=  >0(  ( subquery | invocation | object_reference | '(' values ')' ) ( _alias ( _column_list -> list )? )? ) 

  values ::= keyword_values list ( ',' list )*?

  index_hint ::= ( keyword_force | keyword_use | keyword_ignore ) keyword_index ( keyword_for keyword_join )? '(' identifier:index_name ')'

  join ::= keyword_natural? ( keyword_left | keyword_full keyword_outer | keyword_left keyword_outer | keyword_right | keyword_right keyword_outer | keyword_inner | keyword_full )? keyword_join relation index_hint? join? ( keyword_on _expression:predicate | keyword_using _column_list -> list )

  cross_join ::= keyword_cross keyword_join relation

  lateral_join ::= ( keyword_left | keyword_left keyword_outer | keyword_inner )? keyword_join keyword_lateral ( invocation | subquery ) ( keyword_as identifier:alias | identifier:alias )? keyword_on ( _expression | keyword_true | keyword_false )

  lateral_cross_join ::= keyword_cross keyword_join keyword_lateral ( invocation | subquery ) ( keyword_as identifier:alias | identifier:alias )?

  where ::= keyword_where _expression:predicate

  group_by ::= keyword_group keyword_by _expression ( ',' _expression )* _having?

  _having ::= keyword_having _expression

  order_by ::=  >0(  keyword_order keyword_by order_target ( ',' order_target )* ) 

  order_target ::= _expression ( ( direction | keyword_using ( '<' | '>' | '<=' | '>=' ) ) ( keyword_nulls ( keyword_first | keyword_last ) )? )?

  limit ::= keyword_limit literal offset?

  offset ::= keyword_offset literal

  returning ::= keyword_returning select_expression

  _expression ::=  1(  literal | _qualified_field -> field | parameter | list | case | window_function | subquery | cast | implicit_cast -> cast | exists | invocation | binary_expression | subscript | unary_expression | array | interval | between_expression | parenthesized_expression ) 

  parenthesized_expression ::=  2(  '(' _expression ')' ) 

  subscript ::=  <binary_is(  _expression:expression '[' ( _expression:subscript | _expression:lower ':' _expression:upper ) ']' ) 

  op_other ::= @( '->' | '->>' | '#>' | '#>>' | '~' | '!~' | '~*' | '!~*' | '|' | '&' | '#' | '<<' | '>>' | '<<=' | '>>=' | '##' | '<->' | '@>' | '<@' | '&<' | '&>' | '|>>' | '<<|' | '&<|' | '|&>' | '<^' | '^>' | '?#' | '?-' | '?|' | '?-|' | '?||' | '@@' | '@@@' | '@?' | '#-' | '?&' | '?' | '-|-' | '||' | '^@' )

  binary_expression ::=  <binary_plus(  _expression:left '+':operator _expression:right ) 
	|  <binary_plus(  _expression:left '-':operator _expression:right ) 
	|  <binary_times(  _expression:left '*':operator _expression:right ) 
	|  <binary_times(  _expression:left '/':operator _expression:right ) 
	|  <binary_times(  _expression:left '%':operator _expression:right ) 
	|  <binary_exp(  _expression:left '^':operator _expression:right ) 
	|  <binary_relation(  _expression:left '=':operator _expression:right ) 
	|  <binary_relation(  _expression:left '<':operator _expression:right ) 
	|  <binary_relation(  _expression:left '<=':operator _expression:right ) 
	|  <binary_relation(  _expression:left '!=':operator _expression:right ) 
	|  <binary_relation(  _expression:left '>=':operator _expression:right ) 
	|  <binary_relation(  _expression:left '>':operator _expression:right ) 
	|  <binary_relation(  _expression:left '<>':operator _expression:right ) 
	|  <binary_other(  _expression:left op_other:operator _expression:right ) 
	|  <binary_is(  _expression:left keyword_is:operator _expression:right ) 
	|  <binary_is(  _expression:left is_not:operator _expression:right ) 
	|  <pattern_matching(  _expression:left keyword_like:operator _expression:right ) 
	|  <pattern_matching(  _expression:left not_like:operator _expression:right ) 
	|  <pattern_matching(  _expression:left similar_to:operator _expression:right ) 
	|  <pattern_matching(  _expression:left not_similar_to:operator _expression:right ) 
	|  <binary_is(  _expression:left distinct_from:operator _expression:right ) 
	|  <binary_is(  _expression:left not_distinct_from:operator _expression:right ) 
	|  <clause_connective(  _expression:left keyword_and:operator _expression:right ) 
	|  <clause_disjunctive(  _expression:left keyword_or:operator _expression:right ) 
	|  <binary_in(  _expression:left keyword_in:operator ( list | subquery ):right ) 
	|  <binary_in(  _expression:left not_in:operator ( list | subquery ):right ) 

  op_unary_other ::= @( '|/' | '||/' | '@' | '~' | '@-@' | '@@' | '#' | '?-' | '?|' | '!!' )

  unary_expression ::=  <unary_not(  keyword_not:operator _expression:operand ) 
	|  <unary_not(  bang:operator _expression:operand ) 
	|  <unary_not(  keyword_any:operator _expression:operand ) 
	|  <unary_not(  keyword_some:operator _expression:operand ) 
	|  <unary_not(  keyword_all:operator _expression:operand ) 
	|  <unary_other(  op_unary_other:operator _expression:operand ) 

  between_expression ::=  <between(  _expression:left keyword_between:operator _expression:low keyword_and _expression:high ) 
	|  <between(  _expression:left ( keyword_not keyword_between ):operator _expression:low keyword_and _expression:high ) 

  not_in ::= keyword_not keyword_in

  subquery ::= '(' _dml_read ')'

  list ::= '(' ( _expression ( ',' _expression )* )? ')'

  literal ::=  2(  _integer | _decimal_number | _literal_string | _bit_string | _string_casting | keyword_true | keyword_false | keyword_null ) 

  _double_quote_string ::= /"[^"]*"/

  _single_quote_string ::= /([uU]&)?'([^']|'')*'/ /'([^']|'')*'/*

  _literal_string ::=  1(  _single_quote_string | _double_quote_string | _dollar_quoted_string ) 

  _natural_number ::= /\d+/

  _integer ::= ( '-' | '+' )? /(0[xX][0-9A-Fa-f]+(_[0-9A-Fa-f]+)*)|(0[oO][0-7]+(_[0-7]+)*)|(0[bB][01]+(_[01]+)*)|(\d+(_\d+)*(e[+-]?\d+(_\d+)*)?)/

  _decimal_number ::= ( '-' | '+' )? /((\d+(_\d+)*)?[.]\d+(_\d+)*(e[+-]?\d+(_\d+)*)?)|(\d+(_\d+)*[.](e[+-]?\d+(_\d+)*)?)/

  _bit_string ::= /[bBxX]'([^']|'')*'/ /'([^']|'')*'/*

  _string_casting ::= identifier _single_quote_string

  bang ::= '!'

  identifier ::= _identifier
	| _double_quote_string
	| /`([a-zA-Z_][0-9a-zA-Z_]*)`/

  _identifier ::= /[a-zA-Z_][0-9a-zA-Z_]*/

