; From tree-sitter-vimdoc/src/grammar.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html

;*** maybe you'll need to search and replace this (:[a-zA-Z_]+)([?*+]) => $2$1


extras ::= {
	/[\t ]/
	}

conflicts ::= {
	{ _line_noli _column_heading }
	{ _column_heading }
	}

rules:

  help_file ::= _blank* block* modeline*

  _atom ::= word
	| _atom_common

  word ::= @(  -1(  /[^,(\[\n\t ]+/ )  )
	| _word_common

  _atom_noli ::= word_noli -> "word"
	| _atom_common

  word_noli ::= @(  -1(  /[^-•\n\t ][^(\[\n\t ]*/ )  )
	| @(  -1(  /[-•][^\n\t ]+/ )  )
	| _word_common

  _atom_common ::= tag
	| url
	| optionlink
	| taglink
	| codespan
	| argument
	| keycode
	| note

  _word_common ::= '*'
	| "'"
	| "'"  !( /[^'\n\t ]/ )
	| "'"  !( /[a-z]*[^'a-z\n\t ][a-z]*/ ) !( "'"  )?
	| "'"  !( /[^'\n\t ]/ ) !( "'"  )
	| /\|\|+/
	| '|'
	| '{'
	| '{}'
	| /\{\{+[0-9]*/
	| '('
	| '['
	| '~'
	| '>'
	| ','

  note ::= 'Note:'
	| 'NOTE:'
	| 'Notes:'
	| 'Warning:'
	| 'WARNING:'
	| 'Deprecated'
	| 'DEPRECATED:'

  keycode ::= /<[-a-zA-Z0-9_]+>/
	| /<[SCMAD]-.>/
	| /CTRL-./
	| /CTRL-SHIFT-./
	| /CTRL-(Break|PageUp|PageDown|Insert|Del)/
	| 'CTRL-{char}'
	| /META-./
	| /ALT-./

  uppercase_name ::= !( /[A-Z0-9.()][-A-Z0-9.()_]+/ ) /[A-Z0-9.()][-A-Z0-9.()_]+/*

  _uppercase_words ::=  <-1(  !( /[A-Z0-9.()][-A-Z0-9.()_]+/ ) -> "word" /[A-Z0-9.()][-A-Z0-9.()_]+/* -> "word" )

  block ::= ( line+ | line_li+ | line+ line_li+ ) ( !( '<' ) | _blank ) _blank*

  codeblock ::=  >0(  '>' ( !( /[a-z0-9]+\n/ ) -> "language" | !( /\n/ ) ) line_code -> "line"+ -> "code" )

  _blank ::= ( /\n/ ):blank

  line ::= column_heading
	| h1
	| h2
	| h3
	| codeblock
	| _line_noli

  line_li ::=  >1(  !( '<' )? /[-•][ ]+/ ( ( _atom+ /\n/ ) -> "line" | _atom+ -> "line" codeblock ) _line_noli -> "line"* )

  line_code ::= /\n/
	| /[\t ]+[^\n]+\n/

  _line_noli ::= ( _atom_noli | _uppercase_words ) _atom* ( codeblock | /\n/ )

  modeline ::= @(  2(  /vim:[^\n]+\n/ )  )

  column_heading ::= _column_heading -> "heading" '~' -> "delimiter" !( /\n/ )

  _column_heading ::=  ~1(  ( _atom_noli | _uppercase_words ) _atom* )

  h1 ::=  1(  !( /============+[\t ]*\n/ ) -> "delimiter" _atom+ -> "heading" ( tag _atom* )? /\n/ )

  h2 ::=  1(  !( /------------+[\t ]*\n/ ) -> "delimiter" _atom+ -> "heading" ( tag _atom* )? /\n/ )

  h3 ::= uppercase_name -> "heading" ( tag _atom* )? /\n/

  tag ::= '*' ( !(  1(  /[^*\n\t ]+/ )  ) -> "word" ):text !( '*' )

  url_word ::= /https?:[^\n\t)\] ]+/

  url ::= ( url_word -> "word" ):text

  optionlink ::= "'"  ( !( /[a-z][a-z]+/ ) -> "word" ):text !( "'"  )

  taglink ::= '|' ( !(  1(  /[^|\n\t ]+/ )  ) -> "word" ):text !( '|' )

  codespan ::= '`' ( !( /[^``\n]+/ ) -> "word" ):text !( '`' )

  argument ::= '{' ( !( /[^}\n\t ]+/ ) -> "word" ):text !( '}' ) !( '?' )?

