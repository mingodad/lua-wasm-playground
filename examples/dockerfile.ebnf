; repository: https://github.com/camdencheek/tree-sitter-dockerfile.git
; commit: 087daa20438a6cc01fa5e6fe6906d77c869d19fe
; json from: tree-sitter-dockerfile/src/grammar.json
; From /tmp/tslua/dockerfile0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	heredoc_marker
	heredoc_line
	heredoc_end
	heredoc_nl
	error_sentinel
	}

extras ::= {
	/\s+/
	line_continuation
	comment
	}

rules:

  source_file ::= ( _instruction '\n' )*

  _instruction ::= from_instruction
	| run_instruction
	| cmd_instruction
	| label_instruction
	| expose_instruction
	| env_instruction
	| add_instruction
	| copy_instruction
	| entrypoint_instruction
	| volume_instruction
	| user_instruction
	| workdir_instruction
	| arg_instruction
	| onbuild_instruction
	| stopsignal_instruction
	| healthcheck_instruction
	| shell_instruction
	| maintainer_instruction
	| cross_build_instruction

  from_instruction ::= /[fF][rR][oO][mM]/ -> "FROM" param? image_spec ( /[aA][sS]/ -> "AS" image_alias:as )?

  run_instruction ::= /[rR][uU][nN]/ -> "RUN" ( param | mount_param )* ( json_string_array | shell_command ) heredoc_block*

  cmd_instruction ::= /[cC][mM][dD]/ -> "CMD" ( json_string_array | shell_command )

  label_instruction ::= /[lL][aA][bB][eE][lL]/ -> "LABEL" label_pair+

  expose_instruction ::= /[eE][xX][pP][oO][sS][eE]/ -> "EXPOSE" ( expose_port | expansion )+

  env_instruction ::= /[eE][nN][vV]/ -> "ENV" ( env_pair+ | _spaced_env_pair -> env_pair )

  add_instruction ::= /[aA][dD][dD]/ -> "ADD" param* ( path_with_heredoc -> path _non_newline_whitespace )+ path_with_heredoc -> path heredoc_block*

  copy_instruction ::= /[cC][oO][pP][yY]/ -> "COPY" param* ( path_with_heredoc -> path _non_newline_whitespace )+ path_with_heredoc -> path heredoc_block*

  entrypoint_instruction ::= /[eE][nN][tT][rR][yY][pP][oO][iI][nN][tT]/ -> "ENTRYPOINT" ( json_string_array | shell_command )

  volume_instruction ::= /[vV][oO][lL][uU][mM][eE]/ -> "VOLUME" ( json_string_array | path ( _non_newline_whitespace path )* )

  user_instruction ::= /[uU][sS][eE][rR]/ -> "USER" ( _user_name_or_group -> unquoted_string ):user ( !( ':' ) ( _immediate_user_name_or_group -> unquoted_string ):group )?

  _user_name_or_group ::= ( /([a-zA-Z][-A-Za-z0-9_]*|[0-9]+)/ | expansion ) _immediate_user_name_or_group_fragment*

  _immediate_user_name_or_group ::= _immediate_user_name_or_group_fragment+

  _immediate_user_name_or_group_fragment ::= !( /([a-zA-Z][-a-zA-Z0-9_]*|[0-9]+)/ )
	| _immediate_expansion

  workdir_instruction ::= /[wW][oO][rR][kK][dD][iI][rR]/ -> "WORKDIR" path

  arg_instruction ::= /[aA][rR][gG]/ -> "ARG" ( /[a-zA-Z0-9_]+/ -> unquoted_string ):name ( !( '=' ) ( double_quoted_string | single_quoted_string | unquoted_string ):default )?

  onbuild_instruction ::= /[oO][nN][bB][uU][iI][lL][dD]/ -> "ONBUILD" _instruction

  stopsignal_instruction ::= /[sS][tT][oO][pP][sS][iI][gG][nN][aA][lL]/ -> "STOPSIGNAL" _stopsignal_value

  _stopsignal_value ::= ( /[A-Z0-9]+/ | expansion ) ( !( /[A-Z0-9]+/ ) | _immediate_expansion )*

  healthcheck_instruction ::= /[hH][eE][aA][lL][tT][hH][cC][hH][eE][cC][kK]/ -> "HEALTHCHECK" ( 'NONE' | param* cmd_instruction )

  shell_instruction ::= /[sS][hH][eE][lL][lL]/ -> "SHELL" json_string_array

  maintainer_instruction ::= /[mM][aA][iI][nN][tT][aA][iI][nN][eE][rR]/ -> "MAINTAINER" /.*/

  cross_build_instruction ::= /[cC][rR][oO][sS][sS]_[bB][uU][iI][lL][dD][a-zA-Z_]*/ -> "CROSS_BUILD" /.*/

  heredoc_block ::= heredoc_nl -> "_heredoc_nl" ( heredoc_line '\n' )* heredoc_end

  path ::= ( /[^-\s\$<]/ | /<[^<]/ | expansion ) ( !( /[^\s\$]+/ ) | _immediate_expansion )*

  path_with_heredoc ::= heredoc_marker
	| ( /[^-\s\$<]/ | /<[^-\s\$<]/ | expansion ) ( !( /[^\s\$]+/ ) | _immediate_expansion )*

  expansion ::= '$' _expansion_body

  _immediate_expansion ::= _imm_expansion -> expansion

  _imm_expansion ::= !( '$' ) _expansion_body

  _expansion_body ::= variable
	| !( '{' ) !( /[^\}]+/ ) -> variable !( '}' )

  variable ::= !( /[a-zA-Z_][a-zA-Z0-9_]*/ )

  env_pair ::= _env_key:name !( '=' ) ( ( double_quoted_string | single_quoted_string | unquoted_string ):value )?

  _spaced_env_pair ::= _env_key:name !( /\s+/ ) ( double_quoted_string | single_quoted_string | unquoted_string ):value

  _env_key ::= /[a-zA-Z_][a-zA-Z0-9_]*/ -> unquoted_string

  expose_port ::= /\d+(-\d+)?/ ( '/tcp' | '/udp' )?

  label_pair ::= ( /[-a-zA-Z0-9\._]+/ -> unquoted_string | double_quoted_string | single_quoted_string ):key !( '=' ) ( double_quoted_string | single_quoted_string | unquoted_string ):value

  image_spec ::= image_name:name image_tag?:tag image_digest?:digest

  image_name ::= ( /[^@:\s\$-]/ | expansion ) ( !( /[^@:\s\$]+/ ) | _immediate_expansion )*

  image_tag ::= !( ':' ) ( !( /[^@\s\$]+/ ) | _immediate_expansion )+

  image_digest ::= !( '@' ) ( !( /[a-zA-Z0-9:]+/ ) | _immediate_expansion )+

  param ::= '--' !( /[a-z][-a-z]*/ ):name !( '=' ) !( /[^\s]+/ ):value

  mount_param ::= '--' !( 'mount' ):name !( '=' ) ( mount_param_param ( !( ',' ) mount_param_param )* ):value

  mount_param_param ::= !( /[^\s=,]+/ ) !( '=' ) !( /[^\s=,]+/ )

  image_alias ::= ( /[-a-zA-Z0-9_]+/ | expansion ) ( !( /[-a-zA-Z0-9_]+/ ) | _immediate_expansion )*

  shell_command ::= shell_fragment ( required_line_continuation -> line_continuation shell_fragment )*

  shell_fragment ::= ( heredoc_marker /[ \t]*/ | /[,=-]/ | /[^\\\[\n#\s,=-][^\\\n<]*/ | /\\[^\n,=-]/ | /<[^<]/ )+

  line_continuation ::= /\\[ \t]*\n/

  required_line_continuation ::= '\\\n'

  json_string_array ::= '[' ( json_string ( ',' json_string )* )? ']'

  json_string ::= '"' ( !( /[^"\\]+/ ) | json_escape_sequence -> escape_sequence )* '"'

  json_escape_sequence ::= !( /\\(?:["\\/bfnrt]|u[0-9A-Fa-f]{4})/ )

  double_quoted_string ::= '"' ( !( /[^"\n\\\$]+/ ) | double_quoted_escape_sequence -> escape_sequence | '\\' | _immediate_expansion )* '"'

  single_quoted_string ::= "'" ( !( /[^'\n\\]+/ ) | single_quoted_escape_sequence -> escape_sequence | '\\' )* "'"

  unquoted_string ::= ( !( /[^\s\n\"'\\\$]+/ ) | !( '\\ ' ) | _immediate_expansion )+

  double_quoted_escape_sequence ::= !( '\\\\' | '\\"' )

  single_quoted_escape_sequence ::= !( '\\\\' | "\\'" )

  _non_newline_whitespace ::= !( /[\t ]+/ )

  comment ::= /#.*/

