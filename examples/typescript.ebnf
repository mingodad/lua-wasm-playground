; repository: https://github.com/tree-sitter/tree-sitter-typescript.git
; commit: 9951831c5f05be434514dce38b30eef213667601
; json from: tree-sitter-typescript/typescript/src/grammar.json
; From /tmp/tslua/typescript0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	_automatic_semicolon
	_template_chars
	_ternary_qmark
	html_comment
	'||'
	escape_sequence
	regex_pattern
	jsx_text
	_function_signature_automatic_semicolon
	__error_recovery
	}

extras ::= {
	comment
	html_comment
	/[\s\p{Zs}\uFEFF\u2028\u2029\u2060\u200B]/
	}

precedences ::= {
	{ 'member' 'template_call' 'call' update_expression 'unary_void' 'binary_exp' 'binary_times' 'binary_plus' 'binary_shift' 'binary_compare' 'binary_relation' 'binary_equality' 'bitwise_and' 'bitwise_xor' 'bitwise_or' 'logical_and' 'logical_or' 'ternary' sequence_expression arrow_function }
	{ 'assign' primary_expression }
	{ 'member' 'template_call' 'new' 'call' expression }
	{ 'declaration' 'literal' }
	{ primary_expression statement_block 'object' }
	{ meta_property import }
	{ import_statement import }
	{ export_statement primary_expression }
	{ lexical_declaration primary_expression }
	{ 'call' 'instantiation' 'unary' 'binary' await_expression arrow_function }
	{ 'extends' 'instantiation' }
	{ intersection_type union_type conditional_type function_type 'binary' type_predicate readonly_type }
	{ mapped_type_clause primary_expression }
	{ accessibility_modifier primary_expression }
	{ 'unary_void' expression }
	{ extends_clause primary_expression }
	{ 'unary' 'assign' }
	{ 'declaration' expression }
	{ predefined_type unary_expression }
	{ type flow_maybe_type }
	{ tuple_type array_type pattern type }
	{ readonly_type pattern }
	{ readonly_type primary_expression }
	{ type_query subscript_expression expression }
	{ type_query _type_query_subscript_expression }
	{ nested_type_identifier generic_type primary_type lookup_type index_type_query type }
	{ as_expression satisfies_expression primary_type }
	{ _type_query_member_expression member_expression }
	{ member_expression _type_query_member_expression_in_type_annotation }
	{ _type_query_member_expression primary_expression }
	{ _type_query_subscript_expression subscript_expression }
	{ _type_query_subscript_expression primary_expression }
	{ _type_query_call_expression primary_expression }
	{ _type_query_instantiation_expression primary_expression }
	{ type_query primary_expression }
	{ override_modifier primary_expression }
	{ decorator_call_expression decorator }
	{ literal_type pattern }
	{ predefined_type pattern }
	{ call_expression _type_query_call_expression }
	{ call_expression _type_query_call_expression_in_type_annotation }
	{ new_expression primary_expression }
	{ meta_property primary_expression }
	{ construct_signature _property_name }
	}

supertypes ::= {
	statement
	declaration
	expression
	primary_expression
	pattern
	type
	primary_type
	}

inline ::= {
	_expressions
	_semicolon
	_identifier
	_reserved_identifier
	_jsx_attribute
	_jsx_element_name
	_jsx_child
	_jsx_element
	_jsx_attribute_name
	_jsx_attribute_value
	_jsx_identifier
	_lhs_expression
	_type_identifier
	_jsx_start_opening_element
	}

conflicts ::= {
	{ primary_expression _property_name }
	{ primary_expression _property_name arrow_function }
	{ primary_expression arrow_function }
	{ primary_expression method_definition }
	{ primary_expression rest_pattern }
	{ primary_expression pattern }
	{ primary_expression _for_header }
	{ variable_declarator _for_header }
	{ array array_pattern }
	{ object object_pattern }
	{ assignment_expression pattern }
	{ assignment_expression object_assignment_pattern }
	{ labeled_statement _property_name }
	{ computed_property_name array }
	{ binary_expression _initializer }
	{ class_static_block _property_name }
	{ call_expression instantiation_expression binary_expression }
	{ call_expression instantiation_expression binary_expression unary_expression }
	{ call_expression instantiation_expression binary_expression update_expression }
	{ call_expression instantiation_expression binary_expression await_expression }
	{ class }
	{ nested_identifier nested_type_identifier primary_expression }
	{ nested_identifier nested_type_identifier }
	{ _call_signature function_type }
	{ _call_signature constructor_type }
	{ primary_expression _parameter_name }
	{ primary_expression _parameter_name primary_type }
	{ primary_expression literal_type }
	{ primary_expression literal_type rest_pattern }
	{ primary_expression predefined_type rest_pattern }
	{ primary_expression primary_type }
	{ primary_expression generic_type }
	{ primary_expression predefined_type }
	{ primary_expression pattern primary_type }
	{ _parameter_name primary_type }
	{ pattern primary_type }
	{ optional_tuple_parameter primary_type }
	{ rest_pattern primary_type primary_expression }
	{ object object_type }
	{ object object_pattern object_type }
	{ object object_pattern _property_name }
	{ object_pattern object_type }
	{ object_pattern object_type }
	{ array tuple_type }
	{ array array_pattern tuple_type }
	{ array_pattern tuple_type }
	{ template_literal_type template_string }
	{ primary_type type_parameter }
	}

word ::= identifier

rules:

  program ::= hash_bang_line? statement*

  hash_bang_line ::= /#!.*/

  export_statement ::= 'export' ( '*' _from_clause | namespace_export _from_clause | export_clause _from_clause | export_clause ) _semicolon
	| ( decorator:decorator )* 'export' ( declaration:declaration | 'default' ( declaration:declaration | expression:value _semicolon ) )
	| 'export' 'type' export_clause _from_clause? _semicolon
	| 'export' '=' expression _semicolon
	| 'export' 'as' 'namespace' identifier _semicolon

  namespace_export ::= '*' 'as' _module_export_name

  export_clause ::= '{' ( export_specifier ( ',' export_specifier )* )? ','? '}'

  export_specifier ::= ( 'type' | 'typeof' )? _module_export_name:name ( 'as' _module_export_name:alias )?

  _module_export_name ::= identifier
	| string

  declaration ::= function_declaration
	| generator_function_declaration
	| class_declaration
	| lexical_declaration
	| variable_declaration
	| function_signature
	| abstract_class_declaration
	| module
	|  declaration(  internal_module ) 
	| type_alias_declaration
	| enum_declaration
	| interface_declaration
	| import_alias
	| ambient_declaration

  import ::= @( 'import' )

  import_statement ::= 'import' ( 'type' | 'typeof' )? ( import_clause _from_clause | import_require_clause | string:source ) import_attribute? _semicolon

  import_clause ::= namespace_import
	| named_imports
	| _import_identifier ( ',' ( namespace_import | named_imports ) )?

  _from_clause ::= 'from' string:source

  namespace_import ::= '*' 'as' identifier

  named_imports ::= '{' ( import_specifier ( ',' import_specifier )* )? ','? '}'

  import_specifier ::= ( 'type' | 'typeof' )? ( _import_identifier:name | ( _module_export_name | 'type' -> identifier ):name 'as' _import_identifier:alias )

  import_attribute ::= ( 'with' | 'assert' ) object

  statement ::= export_statement
	| import_statement
	| debugger_statement
	| expression_statement
	| declaration
	| statement_block
	| if_statement
	| switch_statement
	| for_statement
	| for_in_statement
	| while_statement
	| do_statement
	| try_statement
	| with_statement
	| break_statement
	| continue_statement
	| return_statement
	| throw_statement
	| empty_statement
	| labeled_statement

  expression_statement ::= _expressions _semicolon

  variable_declaration ::= 'var' variable_declarator ( ',' variable_declarator )* _semicolon

  lexical_declaration ::= ( 'let' | 'const' ):kind variable_declarator ( ',' variable_declarator )* _semicolon

  variable_declarator ::= ( identifier | _destructuring_pattern ):name type_annotation?:type _initializer?
	|  declaration(  identifier:name '!' type_annotation:type ) 

  statement_block ::=  >0(  '{' statement* '}' _automatic_semicolon? ) 

  else_clause ::= 'else' statement

  if_statement ::=  >0(  'if' parenthesized_expression:condition statement:consequence ( else_clause:alternative )? ) 

  switch_statement ::= 'switch' parenthesized_expression:value switch_body:body

  for_statement ::= 'for' '(' ( ( lexical_declaration | variable_declaration ):initializer | _expressions:initializer ';' | empty_statement:initializer ) ( _expressions ';' | empty_statement ):condition _expressions?:increment ')' statement:body

  for_in_statement ::= 'for' 'await'? _for_header statement:body

  _for_header ::= '(' ( ( _lhs_expression | parenthesized_expression ):left | 'var':kind ( identifier | _destructuring_pattern ):left _initializer? | ( 'let' | 'const' ):kind ( identifier | _destructuring_pattern ):left _automatic_semicolon? ) ( 'in' | 'of' ):operator _expressions:right ')'

  while_statement ::= 'while' parenthesized_expression:condition statement:body

  do_statement ::=  >0(  'do' statement:body 'while' parenthesized_expression:condition _semicolon? ) 

  try_statement ::= 'try' statement_block:body ( catch_clause:handler )? ( finally_clause:finalizer )?

  with_statement ::= 'with' parenthesized_expression:object statement:body

  break_statement ::= 'break' ( identifier -> statement_identifier )?:label _semicolon

  continue_statement ::= 'continue' ( identifier -> statement_identifier )?:label _semicolon

  debugger_statement ::= 'debugger' _semicolon

  return_statement ::= 'return' _expressions? _semicolon

  throw_statement ::= 'throw' _expressions _semicolon

  empty_statement ::= ';'

  labeled_statement ::=  ~-1(  ( ( identifier | _reserved_identifier ) -> statement_identifier ):label ':' statement:body ) 

  switch_body ::= '{' ( switch_case | switch_default )* '}'

  switch_case ::= 'case' _expressions:value ':' statement*:body

  switch_default ::= 'default' ':' statement*:body

  catch_clause ::= 'catch' ( '(' ( identifier | _destructuring_pattern ):parameter ( type_annotation:type )? ')' )? statement_block:body

  finally_clause ::= 'finally' statement_block:body

  parenthesized_expression ::= '(' ( expression type_annotation?:type | sequence_expression ) ')'

  _expressions ::= expression
	| sequence_expression

  expression ::= as_expression
	| satisfies_expression
	| instantiation_expression
	| internal_module
	| type_assertion
	| primary_expression
	| glimmer_template
	| assignment_expression
	| augmented_assignment_expression
	| await_expression
	| unary_expression
	| binary_expression
	| ternary_expression
	| update_expression
	| new_expression
	| yield_expression

  primary_expression ::= subscript_expression
	| member_expression
	| parenthesized_expression
	| _identifier
	| _reserved_identifier -> identifier
	| this
	| super
	| number
	| string
	| template_string
	| regex
	| true
	| false
	| null
	| object
	| array
	| function_expression
	| arrow_function
	| generator_function
	| class
	| meta_property
	| call_expression
	| non_null_expression

  yield_expression ::=  >0(  'yield' ( '*' expression | expression? ) ) 

  object ::=  object(  '{' ( ( pair | spread_element | method_definition | ( identifier | _reserved_identifier ) -> shorthand_property_identifier )? ( ',' ( pair | spread_element | method_definition | ( identifier | _reserved_identifier ) -> shorthand_property_identifier )? )* )? '}' ) 

  object_pattern ::=  object(  '{' ( ( pair_pattern | rest_pattern | object_assignment_pattern | ( identifier | _reserved_identifier ) -> shorthand_property_identifier_pattern )? ( ',' ( pair_pattern | rest_pattern | object_assignment_pattern | ( identifier | _reserved_identifier ) -> shorthand_property_identifier_pattern )? )* )? '}' ) 

  assignment_pattern ::= pattern:left '=' expression:right

  object_assignment_pattern ::= ( ( _reserved_identifier | identifier ) -> shorthand_property_identifier_pattern | _destructuring_pattern ):left '=' expression:right

  array ::= '[' ( ( expression | spread_element )? ( ',' ( expression | spread_element )? )* )? ']'

  array_pattern ::= '[' ( ( pattern | assignment_pattern )? ( ',' ( pattern | assignment_pattern )? )* )? ']'

  glimmer_template ::= glimmer_opening_tag:open_tag _glimmer_template_content*:content glimmer_closing_tag:close_tag
	| glimmer_opening_tag:open_tag glimmer_closing_tag:close_tag

  _glimmer_template_content ::= /.{1,}/

  glimmer_opening_tag ::= '<template>'

  glimmer_closing_tag ::= '</template>'

  _jsx_element ::= jsx_element
	| jsx_self_closing_element

  jsx_element ::= jsx_opening_element:open_tag _jsx_child* jsx_closing_element:close_tag

  html_character_reference ::= /&(#([xX][0-9a-fA-F]{1,6}|[0-9]{1,5})|[A-Za-z]{1,30});/

  jsx_expression ::= '{' ( expression | sequence_expression | spread_element )? '}'

  _jsx_child ::= jsx_text
	| html_character_reference
	| _jsx_element
	| jsx_expression

  jsx_opening_element ::=  ~-1(  _jsx_start_opening_element '>' ) 

  jsx_identifier ::= /[a-zA-Z_$][a-zA-Z\d_$]*-[a-zA-Z\d_$\-]*/

  _jsx_identifier ::= jsx_identifier -> identifier
	| identifier

  nested_identifier ::=  member(  ( identifier | nested_identifier -> member_expression ):object '.' ( identifier -> property_identifier ):property ) 

  jsx_namespace_name ::= _jsx_identifier ':' _jsx_identifier

  _jsx_element_name ::= _jsx_identifier
	| nested_identifier -> member_expression
	| jsx_namespace_name

  jsx_closing_element ::= '</' ( _jsx_element_name:name )? '>'

  jsx_self_closing_element ::=  ~-1(  _jsx_start_opening_element '/>' ) 

  _jsx_attribute ::= jsx_attribute
	| jsx_expression

  _jsx_attribute_name ::= _jsx_identifier -> property_identifier
	| jsx_namespace_name

  jsx_attribute ::= _jsx_attribute_name ( '=' _jsx_attribute_value )?

  _jsx_string ::= '"' ( unescaped_double_jsx_string_fragment -> string_fragment | html_character_reference )* '"'
	| "'" ( unescaped_single_jsx_string_fragment -> string_fragment | html_character_reference )* "'"

  unescaped_double_jsx_string_fragment ::= !(  1(  /([^"&]|&[^#A-Za-z])+/ )  )

  unescaped_single_jsx_string_fragment ::= !(  1(  /([^'&]|&[^#A-Za-z])+/ )  )

  _jsx_attribute_value ::= _jsx_string -> string
	| jsx_expression
	| _jsx_element

  class ::=  literal(  ( decorator:decorator )* 'class' _type_identifier?:name type_parameters?:type_parameters class_heritage? class_body:body ) 

  class_declaration ::=  <declaration(  ( decorator:decorator )* 'class' _type_identifier:name type_parameters?:type_parameters class_heritage? class_body:body _automatic_semicolon? ) 

  class_heritage ::= extends_clause implements_clause?
	| implements_clause

  function_expression ::=  literal(  'async'? 'function' identifier?:name _call_signature statement_block:body ) 

  function_declaration ::=  >declaration(  'async'? 'function' identifier:name _call_signature statement_block:body _automatic_semicolon? ) 

  generator_function ::=  literal(  'async'? 'function' '*' identifier?:name _call_signature statement_block:body ) 

  generator_function_declaration ::=  >declaration(  'async'? 'function' '*' identifier:name _call_signature statement_block:body _automatic_semicolon? ) 

  arrow_function ::= 'async'? ( ( _reserved_identifier -> identifier | identifier ):parameter | _call_signature ) '=>' ( expression | statement_block ):body

  _call_signature ::= type_parameters?:type_parameters formal_parameters:parameters ( type_annotation | asserts_annotation | type_predicate_annotation )?:return_type

  _formal_parameter ::= required_parameter
	| optional_parameter

  optional_chain ::= '?.'

  call_expression ::=  call(  ( expression | import ):function type_arguments?:type_arguments arguments:arguments ) 
	|  template_call(  ( primary_expression | new_expression ):function template_string:arguments ) 
	|  member(  primary_expression:function '?.' type_arguments?:type_arguments arguments:arguments ) 

  new_expression ::=  >new(  'new' primary_expression:constructor type_arguments?:type_arguments arguments?:arguments ) 

  await_expression ::=  unary_void(  'await' expression ) 

  member_expression ::=  member(  ( expression | primary_expression | import ):object ( '.' | optional_chain:optional_chain ) ( private_property_identifier | identifier -> property_identifier ):property ) 

  subscript_expression ::=  >member(  ( expression | primary_expression ):object ( optional_chain:optional_chain )? '[' _expressions:index ']' ) 

  _lhs_expression ::= member_expression
	| subscript_expression
	| _identifier
	| _reserved_identifier -> identifier
	| _destructuring_pattern
	| non_null_expression

  assignment_expression ::=  >assign(  'using'? ( parenthesized_expression | _lhs_expression ):left '=' expression:right ) 

  _augmented_assignment_lhs ::= member_expression
	| subscript_expression
	| _reserved_identifier -> identifier
	| identifier
	| parenthesized_expression
	| non_null_expression

  augmented_assignment_expression ::=  >assign(  _augmented_assignment_lhs:left ( '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '>>=' | '>>>=' | '<<=' | '**=' | '&&=' | '||=' | '??=' ):operator expression:right ) 

  _initializer ::= '=' expression:value

  _destructuring_pattern ::= object_pattern
	| array_pattern

  spread_element ::= '...' expression

  ternary_expression ::=  >ternary(  expression:condition _ternary_qmark -> "?" expression:consequence ':' expression:alternative ) 

  binary_expression ::=  <logical_and(  expression:left '&&':operator expression:right ) 
	|  <logical_or(  expression:left '||':operator expression:right ) 
	|  <binary_shift(  expression:left '>>':operator expression:right ) 
	|  <binary_shift(  expression:left '>>>':operator expression:right ) 
	|  <binary_shift(  expression:left '<<':operator expression:right ) 
	|  <bitwise_and(  expression:left '&':operator expression:right ) 
	|  <bitwise_xor(  expression:left '^':operator expression:right ) 
	|  <bitwise_or(  expression:left '|':operator expression:right ) 
	|  <binary_plus(  expression:left '+':operator expression:right ) 
	|  <binary_plus(  expression:left '-':operator expression:right ) 
	|  <binary_times(  expression:left '*':operator expression:right ) 
	|  <binary_times(  expression:left '/':operator expression:right ) 
	|  <binary_times(  expression:left '%':operator expression:right ) 
	|  >binary_exp(  expression:left '**':operator expression:right ) 
	|  <binary_relation(  expression:left '<':operator expression:right ) 
	|  <binary_relation(  expression:left '<=':operator expression:right ) 
	|  <binary_equality(  expression:left '==':operator expression:right ) 
	|  <binary_equality(  expression:left '===':operator expression:right ) 
	|  <binary_equality(  expression:left '!=':operator expression:right ) 
	|  <binary_equality(  expression:left '!==':operator expression:right ) 
	|  <binary_relation(  expression:left '>=':operator expression:right ) 
	|  <binary_relation(  expression:left '>':operator expression:right ) 
	|  <ternary(  expression:left '??':operator expression:right ) 
	|  <binary_relation(  expression:left 'instanceof':operator expression:right ) 
	|  <binary_relation(  ( expression | private_property_identifier ):left 'in':operator expression:right ) 

  unary_expression ::=  <unary_void(  ( '!' | '~' | '-' | '+' | 'typeof' | 'void' | 'delete' ):operator expression:argument ) 

  update_expression ::=  <0(  expression:argument ( '++' | '--' ):operator | ( '++' | '--' ):operator expression:argument ) 

  sequence_expression ::=  >0(  expression ( ',' expression )* ) 

  string ::= '"' ( unescaped_double_string_fragment -> string_fragment | escape_sequence )* '"'
	| "'" ( unescaped_single_string_fragment -> string_fragment | escape_sequence )* "'"

  unescaped_double_string_fragment ::= !(  1(  /[^"\\\r\n]+/ )  )

  unescaped_single_string_fragment ::= !(  1(  /[^'\\\r\n]+/ )  )

  escape_sequence ::= !( '\\' ( /[^xu0-7]/ | /[0-7]{1,3}/ | /x[0-9a-fA-F]{2}/ | /u[0-9a-fA-F]{4}/ | /u\{[0-9a-fA-F]+\}/ | /[\r?][\n\u2028\u2029]/ ) )

  comment ::= @( '//' /[^\r\n\u2028\u2029]*/ | '/*' /[^*]*\*+([^/*][^*]*\*+)*/ '/' )

  template_string ::= '`' ( _template_chars -> string_fragment | escape_sequence | template_substitution )* '`'

  template_substitution ::= '${' _expressions '}'

  regex ::= '/' regex_pattern:pattern !(  1(  '/' )  ) ( regex_flags:flags )?

  regex_pattern ::= !(  -1(  ( '[' ( '\\' /./ | /[^\]\n\\]/ )* ']' | '\\' /./ | /[^/\\\[\n]/ )+ )  )

  regex_flags ::= !( /[a-z]+/ )

  number ::= @( ( '0x' | '0X' ) /[\da-fA-F](_?[\da-fA-F])*/ | ( '0' | '0'? /[1-9]/ ( '_'? /\d(_?\d)*/ )? ) '.' /\d(_?\d)*/? ( ( 'e' | 'E' ) ( '-' | '+' )? /\d(_?\d)*/ )? | '.' /\d(_?\d)*/ ( ( 'e' | 'E' ) ( '-' | '+' )? /\d(_?\d)*/ )? | ( '0' | '0'? /[1-9]/ ( '_'? /\d(_?\d)*/ )? ) ( 'e' | 'E' ) ( '-' | '+' )? /\d(_?\d)*/ | /\d(_?\d)*/ | ( '0b' | '0B' ) /[0-1](_?[0-1])*/ | ( '0o' | '0O' ) /[0-7](_?[0-7])*/ | ( ( '0x' | '0X' ) /[\da-fA-F](_?[\da-fA-F])*/ | ( '0b' | '0B' ) /[0-1](_?[0-1])*/ | ( '0o' | '0O' ) /[0-7](_?[0-7])*/ | /\d(_?\d)*/ ) 'n' )

  _identifier ::= undefined
	| identifier

  identifier ::= @( /[^\x00-\x1F\s\p{Zs}0-9:;`"'@#.,|^&<=>+\-*/\\%?!~()\[\]{}\uFEFF\u2060\u200B\u2028\u2029]|\\u[0-9a-fA-F]{4}|\\u\{[0-9a-fA-F]+\}/ /[^\x00-\x1F\s\p{Zs}:;`"'@#.,|^&<=>+\-*/\\%?!~()\[\]{}\uFEFF\u2060\u200B\u2028\u2029]|\\u[0-9a-fA-F]{4}|\\u\{[0-9a-fA-F]+\}/* )

  private_property_identifier ::= @( '#' /[^\x00-\x1F\s\p{Zs}0-9:;`"'@#.,|^&<=>+\-*/\\%?!~()\[\]{}\uFEFF\u2060\u200B\u2028\u2029]|\\u[0-9a-fA-F]{4}|\\u\{[0-9a-fA-F]+\}/ /[^\x00-\x1F\s\p{Zs}:;`"'@#.,|^&<=>+\-*/\\%?!~()\[\]{}\uFEFF\u2060\u200B\u2028\u2029]|\\u[0-9a-fA-F]{4}|\\u\{[0-9a-fA-F]+\}/* )

  meta_property ::= 'new' '.' 'target'
	| 'import' '.' 'meta'

  this ::= 'this'

  super ::= 'super'

  true ::= 'true'

  false ::= 'false'

  null ::= 'null'

  undefined ::= 'undefined'

  arguments ::= '(' ( ( expression | spread_element )? ( ',' ( expression | spread_element )? )* )? ')'

  decorator ::= '@' ( identifier | decorator_member_expression -> member_expression | decorator_call_expression -> call_expression | decorator_parenthesized_expression -> parenthesized_expression )

  decorator_member_expression ::=  member(  ( identifier | decorator_member_expression -> member_expression ):object '.' ( identifier -> property_identifier ):property ) 

  decorator_call_expression ::=  call(  ( identifier | decorator_member_expression -> member_expression ):function ( type_arguments:type_arguments )? arguments:arguments ) 

  class_body ::= '{' ( ( decorator:decorator )* method_definition _semicolon? | method_signature ( _function_signature_automatic_semicolon | ',' ) | class_static_block | ( abstract_method_signature | index_signature | method_signature | public_field_definition ) ( _semicolon | ',' ) | ';' )* '}'

  field_definition ::= ( decorator:decorator )* 'static'? _property_name:property _initializer?

  formal_parameters ::= '(' ( _formal_parameter ( ',' _formal_parameter )* ','? )? ')'

  class_static_block ::= 'static' _automatic_semicolon? statement_block:body

  pattern ::=  ~-1(  _lhs_expression | rest_pattern ) 

  rest_pattern ::=  >0(  '...' _lhs_expression ) 

  method_definition ::=  <0(  accessibility_modifier? 'static'? override_modifier? 'readonly'? 'async'? ( 'get' | 'set' | '*' )? _property_name:name '?'? _call_signature statement_block:body ) 

  pair ::= _property_name:key ':' expression:value

  pair_pattern ::= _property_name:key ':' ( pattern | assignment_pattern ):value

  _property_name ::= ( identifier | _reserved_identifier ) -> property_identifier
	| private_property_identifier
	| string
	| number
	| computed_property_name

  computed_property_name ::= '[' expression ']'

  _reserved_identifier ::= 'declare'
	| 'namespace'
	| 'type'
	| 'public'
	| 'private'
	| 'protected'
	| 'override'
	| 'readonly'
	| 'module'
	| 'any'
	| 'number'
	| 'boolean'
	| 'string'
	| 'symbol'
	| 'export'
	| 'object'
	| 'new'
	| 'readonly'
	| 'get'
	| 'set'
	| 'async'
	| 'static'
	| 'export'
	| 'let'

  _semicolon ::= _automatic_semicolon
	| ';'

  public_field_definition ::= ( decorator:decorator )* ( 'declare' accessibility_modifier? | accessibility_modifier 'declare'? )? ( 'static'? override_modifier? 'readonly'? | 'abstract'? 'readonly'? | 'readonly'? 'abstract'? | 'accessor'? ) _property_name:name ( '?' | '!' )? type_annotation?:type _initializer?

  _jsx_start_opening_element ::= '<' ( ( ( _jsx_identifier | jsx_namespace_name ):name | ( identifier | nested_identifier -> member_expression ):name type_arguments?:type_arguments ) ( _jsx_attribute:attribute )* )?

  _import_identifier ::= identifier
	| 'type' -> identifier

  non_null_expression ::=  <unary(  expression '!' ) 

  method_signature ::= accessibility_modifier? 'static'? override_modifier? 'readonly'? 'async'? ( 'get' | 'set' | '*' )? _property_name:name '?'? _call_signature

  abstract_method_signature ::= accessibility_modifier? 'abstract' override_modifier? ( 'get' | 'set' | '*' )? _property_name:name '?'? _call_signature

  function_signature ::= 'async'? 'function' identifier:name _call_signature ( _semicolon | _function_signature_automatic_semicolon )

  decorator_parenthesized_expression ::= '(' ( identifier | decorator_member_expression -> member_expression | decorator_call_expression -> call_expression ) ')'

  type_assertion ::=  <unary(  type_arguments expression ) 

  as_expression ::=  <binary(  expression 'as' ( 'const' | type ) ) 

  satisfies_expression ::=  <binary(  expression 'satisfies' type ) 

  instantiation_expression ::=  instantiation(  expression type_arguments:type_arguments ) 

  import_require_clause ::= identifier '=' 'require' '(' string:source ')'

  extends_clause ::= 'extends' _extends_clause_single ( ',' _extends_clause_single )*

  _extends_clause_single ::=  extends(  expression:value type_arguments?:type_arguments ) 

  implements_clause ::= 'implements' type ( ',' type )*

  ambient_declaration ::= 'declare' ( declaration | 'global' statement_block | 'module' '.' identifier -> property_identifier ':' type _semicolon )

  abstract_class_declaration ::=  declaration(  ( decorator:decorator )* 'abstract' 'class' _type_identifier:name type_parameters?:type_parameters class_heritage? class_body:body ) 

  module ::= 'module' _module

  internal_module ::= 'namespace' _module

  _module ::=  >0(  ( string | identifier | nested_identifier ):name statement_block?:body ) 

  import_alias ::= 'import' identifier '=' ( identifier | nested_identifier ) _semicolon

  nested_type_identifier ::=  member(  ( identifier | nested_identifier ):module '.' _type_identifier:name ) 

  interface_declaration ::= 'interface' _type_identifier:name type_parameters?:type_parameters extends_type_clause? ( object_type -> interface_body ):body

  extends_type_clause ::= 'extends' ( _type_identifier | nested_type_identifier | generic_type ):type ( ',' ( _type_identifier | nested_type_identifier | generic_type ):type )*

  enum_declaration ::= 'const'? 'enum' identifier:name enum_body:body

  enum_body ::= '{' ( ( _property_name:name | enum_assignment ) ( ',' ( _property_name:name | enum_assignment ) )* ','? )? '}'

  enum_assignment ::= _property_name:name _initializer

  type_alias_declaration ::= 'type' _type_identifier:name type_parameters?:type_parameters '=' type:value _semicolon

  accessibility_modifier ::= 'public'
	| 'private'
	| 'protected'

  override_modifier ::= 'override'

  required_parameter ::= _parameter_name type_annotation?:type _initializer?

  optional_parameter ::= _parameter_name '?' type_annotation?:type _initializer?

  _parameter_name ::= ( decorator:decorator )* accessibility_modifier? override_modifier? 'readonly'? ( pattern | this ):pattern

  omitting_type_annotation ::= '-?:' type

  adding_type_annotation ::= '+?:' type

  opting_type_annotation ::= '?:' type

  type_annotation ::= ':' type

  _type_query_member_expression_in_type_annotation ::= ( import | _type_query_member_expression_in_type_annotation -> member_expression | _type_query_call_expression_in_type_annotation -> call_expression ):object '.' ( private_property_identifier | identifier -> property_identifier ):property

  _type_query_call_expression_in_type_annotation ::= ( import | _type_query_member_expression_in_type_annotation -> member_expression ):function arguments:arguments

  asserts ::= 'asserts' ( type_predicate | identifier | this )

  asserts_annotation ::= ':' asserts

  type ::= primary_type
	| function_type
	| readonly_type
	| constructor_type
	| infer_type
	|  -1(  _type_query_member_expression_in_type_annotation -> member_expression ) 
	|  -1(  _type_query_call_expression_in_type_annotation -> call_expression ) 

  tuple_parameter ::= ( identifier | rest_pattern ):name type_annotation:type

  optional_tuple_parameter ::= identifier:name '?' type_annotation:type

  optional_type ::= type '?'

  rest_type ::= '...' type

  _tuple_type_member ::= tuple_parameter -> required_parameter
	| optional_tuple_parameter -> optional_parameter
	| optional_type
	| rest_type
	| type

  constructor_type ::=  <0(  'abstract'? 'new' type_parameters?:type_parameters formal_parameters:parameters '=>' type:type ) 

  primary_type ::= parenthesized_type
	| predefined_type
	| _type_identifier
	| nested_type_identifier
	| generic_type
	| object_type
	| array_type
	| tuple_type
	| flow_maybe_type
	| type_query
	| index_type_query
	| this -> this_type
	| existential_type
	| literal_type
	| lookup_type
	| conditional_type
	| template_literal_type
	| intersection_type
	| union_type
	| 'const'

  template_type ::= '${' ( primary_type | infer_type ) '}'

  template_literal_type ::= '`' ( _template_chars -> string_fragment | template_type )* '`'

  infer_type ::=  >0(  'infer' _type_identifier ( 'extends' type )? ) 

  conditional_type ::=  >0(  type:left 'extends' type:right '?' type:consequence ':' type:alternative ) 

  generic_type ::=  call(  ( _type_identifier | nested_type_identifier ):name type_arguments:type_arguments ) 

  type_predicate ::= ( identifier | this | predefined_type -> identifier ):name 'is' type:type

  type_predicate_annotation ::= ':' type_predicate

  _type_query_member_expression ::= ( identifier | this | _type_query_subscript_expression -> subscript_expression | _type_query_member_expression -> member_expression | _type_query_call_expression -> call_expression ):object ( '.' | '?.' ) ( private_property_identifier | identifier -> property_identifier ):property

  _type_query_subscript_expression ::= ( identifier | this | _type_query_subscript_expression -> subscript_expression | _type_query_member_expression -> member_expression | _type_query_call_expression -> call_expression ):object '?.'? '[' ( predefined_type | string | number ):index ']'

  _type_query_call_expression ::= ( import | identifier | _type_query_member_expression -> member_expression | _type_query_subscript_expression -> subscript_expression ):function arguments:arguments

  _type_query_instantiation_expression ::= ( import | identifier | _type_query_member_expression -> member_expression | _type_query_subscript_expression -> subscript_expression ):function type_arguments:type_arguments

  type_query ::=  >0(  'typeof' ( _type_query_subscript_expression -> subscript_expression | _type_query_member_expression -> member_expression | _type_query_call_expression -> call_expression | _type_query_instantiation_expression -> instantiation_expression | identifier | this ) ) 

  index_type_query ::= 'keyof' primary_type

  lookup_type ::= primary_type '[' type ']'

  mapped_type_clause ::= _type_identifier:name 'in' type:type ( 'as' type:alias )?

  literal_type ::= _number -> unary_expression
	| number
	| string
	| true
	| false
	| null
	| undefined

  _number ::=  <1(  ( '-' | '+' ):operator number:argument ) 

  existential_type ::= '*'

  flow_maybe_type ::=  >0(  '?' primary_type ) 

  parenthesized_type ::= '(' type ')'

  predefined_type ::= 'any'
	| 'number'
	| 'boolean'
	| 'string'
	| 'symbol'
	| ( 'unique' 'symbol' ) -> "unique symbol"
	| 'void'
	| 'unknown'
	| 'string'
	| 'never'
	| 'object'

  type_arguments ::= '<' type ( ',' type )* ','? '>'

  object_type ::= ( '{' | '{|' ) ( ( ',' | ';' )? ( export_statement | property_signature | call_signature | construct_signature | index_signature | method_signature ) ( ( ',' | _semicolon ) ( export_statement | property_signature | call_signature | construct_signature | index_signature | method_signature ) )* ( ',' | _semicolon )? )? ( '}' | '|}' )

  call_signature ::= _call_signature

  property_signature ::= accessibility_modifier? 'static'? override_modifier? 'readonly'? _property_name:name '?'? type_annotation?:type

  type_parameters ::= '<' type_parameter ( ',' type_parameter )* ','? '>'

  type_parameter ::= 'const'? _type_identifier:name constraint?:constraint default_type?:value

  default_type ::= '=' type

  constraint ::= ( 'extends' | ':' ) type

  construct_signature ::= 'abstract'? 'new' type_parameters?:type_parameters formal_parameters:parameters type_annotation?:type

  index_signature ::= ( ( '-' | '+' )?:sign 'readonly' )? '[' ( ( identifier | _reserved_identifier -> identifier ):name ':' type:index_type | mapped_type_clause ) ']' ( type_annotation | omitting_type_annotation | adding_type_annotation | opting_type_annotation ):type

  array_type ::= primary_type '[' ']'

  tuple_type ::= '[' ( _tuple_type_member ( ',' _tuple_type_member )* )? ','? ']'

  readonly_type ::= 'readonly' type

  union_type ::=  <0(  type? '|' type ) 

  intersection_type ::=  <0(  type? '&' type ) 

  function_type ::=  <0(  type_parameters?:type_parameters formal_parameters:parameters '=>' ( type | asserts | type_predicate ):return_type ) 

  _type_identifier ::= identifier -> type_identifier

