; repository: https://github.com/Azganoth/tree-sitter-lua.git
; commit: 6b02dfd7f07f36c223270e97eb0adf84e15a4cef
; json from: tree-sitter-lua/src/grammar.json
; From /tmp/tslua/lua0.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html


externals ::= {
	_comment_start
	_comment_content
	_comment_end
	_string_start
	_string_content
	_string_end
	}

extras ::= {
	/\s/
	comment
	}

supertypes ::= {
	prefix_expression
	expression
	statement
	}

inline ::= {
	prefix
	field_separator
	}

word ::= identifier

rules:

  chunk ::= shebang? _block?

  shebang ::= /#!.*/

  block ::= _block

  _block ::= return_statement
	| statement+ return_statement?

  return_statement ::= 'return' expression_list? empty_statement?

  statement ::= empty_statement
	| variable_assignment
	| local_variable_declaration
	| call
	| label_statement
	| goto_statement
	| break_statement
	| do_statement
	| while_statement
	| repeat_statement
	| if_statement
	| for_numeric_statement
	| for_generic_statement
	| function_definition_statement
	| local_function_definition_statement

  local_function_definition_statement ::= 'local' 'function' identifier:name _function_body

  function_definition_statement ::= 'function' ( identifier | _table_function_variable -> variable ):name _function_body

  _table_function_variable ::= _table_identifier ( _named_field_identifier | _method_identifier )

  _table_identifier ::= ( identifier | _table_field_variable -> variable ):table

  _table_field_variable ::= _table_identifier _named_field_identifier

  for_generic_statement ::= 'for' ( _name_list -> variable_list ):left 'in' ( _value_list -> expression_list ):right 'do' ( block:body )? 'end'

  _name_list ::= identifier:name ( ',' identifier:name )*

  _value_list ::= expression:value ( ',' expression:value )*

  for_numeric_statement ::= 'for' identifier:name '=' expression:start ',' expression:end ( ',' expression:step )? 'do' ( block:body )? 'end'

  if_statement ::= 'if' expression:condition 'then' ( block:consequence )? ( elseif_clause:alternative )* ( else_clause:alternative )? 'end'

  elseif_clause ::= 'elseif' expression:condition 'then' ( block:consequence )?

  else_clause ::= 'else' ( block:body )?

  repeat_statement ::= 'repeat' ( block:body )? 'until' expression:condition

  while_statement ::= 'while' expression:condition 'do' ( block:body )? 'end'

  do_statement ::= 'do' ( block:body )? 'end'

  break_statement ::= 'break'

  goto_statement ::= 'goto' identifier:name

  label_statement ::= '::' identifier:name '::'

  local_variable_declaration ::= 'local' _local_variable_list -> variable_list ( '=' _value_list -> expression_list )?

  _local_variable_list ::= _local_variable -> variable ( ',' _local_variable -> variable )*

  _local_variable ::= identifier:name attribute?

  attribute ::= '<' identifier:name '>'

  variable_assignment ::= variable_list '=' _value_list -> expression_list

  variable_list ::= variable ( ',' variable )*

  empty_statement ::= ';'

  expression ::= nil
	| false
	| true
	| number
	| string
	| vararg_expression
	| function_definition
	| prefix_expression
	| table
	| unary_expression
	| binary_expression

  binary_expression ::=  <1(  expression:left 'or':operator expression:right ) 
	|  <2(  expression:left 'and':operator expression:right ) 
	|  <3(  expression:left '==':operator expression:right ) 
	|  <3(  expression:left '~=':operator expression:right ) 
	|  <3(  expression:left '<':operator expression:right ) 
	|  <3(  expression:left '>':operator expression:right ) 
	|  <3(  expression:left '<=':operator expression:right ) 
	|  <3(  expression:left '>=':operator expression:right ) 
	|  <4(  expression:left '|':operator expression:right ) 
	|  <5(  expression:left '~':operator expression:right ) 
	|  <6(  expression:left '&':operator expression:right ) 
	|  <7(  expression:left '<<':operator expression:right ) 
	|  <7(  expression:left '>>':operator expression:right ) 
	|  <9(  expression:left '+':operator expression:right ) 
	|  <9(  expression:left '-':operator expression:right ) 
	|  <10(  expression:left '*':operator expression:right ) 
	|  <10(  expression:left '/':operator expression:right ) 
	|  <10(  expression:left '//':operator expression:right ) 
	|  <10(  expression:left '%':operator expression:right ) 
	|  >8(  expression:left '..':operator expression:right ) 
	|  >12(  expression:left '^':operator expression:right ) 

  unary_expression ::=  <11(  'not':operator expression:argument ) 
	|  <11(  '#':operator expression:argument ) 
	|  <11(  '-':operator expression:argument ) 
	|  <11(  '~':operator expression:argument ) 

  table ::= '{' field_list? '}'

  field_list ::= field ( field_separator field )* field_separator?

  field ::= ( ( identifier:key | '[' expression:key ']' ) '=' )? expression:value

  field_separator ::= ','
	| ';'

  prefix ::= variable
	| call
	| parenthesized_expression

  prefix_expression ::= prefix

  _prefix_expression ::=  13(  prefix ) 

  parenthesized_expression ::= '(' expression ')'

  call ::= ( _prefix_expression | _table_method_variable -> variable ):function argument_list:arguments

  _table_method_variable ::= prefix_expression:table _method_identifier

  _method_identifier ::= ':' identifier:method

  argument_list ::= '(' expression_list? ')'
	| table
	| string

  expression_list ::= expression ( ',' expression )*

  variable ::= identifier:name
	| _table_variable

  _table_variable ::= ( identifier | _table_variable -> variable | call | parenthesized_expression ):table ( _indexed_field_identifier | _named_field_identifier )

  _named_field_identifier ::= '.' identifier:field

  _indexed_field_identifier ::= '[' expression:field ']'

  function_definition ::= 'function' _function_body

  _function_body ::= '(' ( parameter_list:parameters )? ')' ( block:body )? 'end'

  parameter_list ::= identifier:name ( ',' identifier:name )* ( ',' vararg_expression )?
	| vararg_expression

  vararg_expression ::= '...'

  string ::= _string_start _string_content? _string_end

  number ::= @( '-'? ( ( /[0-9]/+ | /[0-9]/+ '.' /[0-9]/* | /[0-9]/* '.' /[0-9]/+ ) ( ( 'e' | 'E' ) ( '+' | '-' )? /[0-9]/+ )? | ( '0x' | '0X' ) ( /[0-9a-fA-F]/+ | /[0-9a-fA-F]/+ '.' /[0-9a-fA-F]/* | /[0-9a-fA-F]/* '.' /[0-9a-fA-F]/+ ) ( ( 'p' | 'P' ) ( '+' | '-' )? /[0-9]/+ )? ) )

  true ::= 'true'

  false ::= 'false'

  nil ::= 'nil'

  identifier ::= /[a-zA-Z_][0-9a-zA-Z_]*/

  comment ::= _comment_start _comment_content? _comment_end

