; From tree-sitter-v/src/grammar.json
; EBNF to generate grammar.js at
;      https://mingodad.github.io/lua-wasm-playground/
;      based on https://github.com/eatkins/tree-sitter-ebnf-generator
;      see also https://mingodad.github.io/plgh/json2ebnf.html

;*** maybe you'll need to search and replace this (:[a-zA-Z_]+)([?*+]) => $2$1


externals ::= {
	_automatic_separator
	_braced_interpolation_opening
	_unbraced_interpolation_opening
	_interpolation_closing
	_c_string_opening
	_raw_string_opening
	_string_opening
	_string_content
	_string_closing
	_comment
	}

extras ::= {
	comment
	/\s/
	}

supertypes ::= {
	_expression
	_type
	_simple_type
	_statement
	_top_level_declaration
	_simple_statement
	_expression_with_blocks
	}

inline ::= {
	_type
	_string_literal
	_field_identifier
	_module_identifier
	_top_level_declaration
	_non_empty_array
	}

conflicts ::= {
	{ qualified_type _expression }
	{ fixed_array_type _expression }
	{ _binded_type _expression }
	}

word ::= identifier

rules:

  source_file ::= ( ( _top_level_declaration | _statement ) _automatic_separator? )*

  _top_level_declaration ::= const_declaration
	| global_var_declaration
	| function_declaration
	| type_declaration
	| struct_declaration
	| _binded_struct_declaration -> "struct_declaration"
	| enum_declaration
	| interface_declaration
	| import_declaration
	| module_clause

  _expression ::= empty_literal_value
	| int_literal
	| float_literal
	| _string_literal
	| rune_literal
	| _reserved_identifier
	| binded_identifier
	| identifier
	| _single_line_expression
	| type_initializer
	| map
	| array
	| fixed_array
	| unary_expression
	| binary_expression
	| is_expression
	| index_expression
	| slice_expression
	| type_cast_expression
	| as_type_cast_expression
	| call_expression
	| special_call_expression
	| fn_literal
	| selector_expression
	| parenthesized_expression
	| _expression_with_blocks

  parenthesized_expression ::= '(' _expression ')'

  unary_expression ::=  6(  ( '+' | '-' | '!' | '~' | '^' | '*' | '&' | '<-' ):operator ( _expression ):operand )

  binary_expression ::=  <5(  ( _expression ):left ( '*' | '/' | '%' | '<<' | '>>' | '>>>' | '&' | '&^' ):operator ( _expression ):right )
	|  <4(  ( _expression ):left ( '+' | '-' | '|' | '^' ):operator ( _expression ):right )
	|  <3(  ( _expression ):left ( '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | '!in' ):operator ( _expression ):right )
	|  <2(  ( _expression ):left ( '&&' ):operator ( _expression ):right )
	|  <1(  ( _expression ):left ( '||' ):operator ( _expression ):right )

  as_type_cast_expression ::= _expression 'as' _simple_type

  type_cast_expression ::= ( _simple_type ):type '(' ( _expression ):operand ')'

  call_expression ::=  >3(  ( identifier | binded_identifier | comptime_identifier | selector_expression | comptime_selector_expression ):function ( type_parameters )?:type_parameters ( argument_list ):arguments option_propagator? )

  special_argument_list ::= '(' ( _simple_type | option_type ) ( ',' _expression )? ')'

  special_call_expression ::=  >3(  ( identifier | selector_expression ):function ( special_argument_list ):arguments option_propagator? )

  comptime_identifier ::= '$' identifier

  comptime_selector_expression ::= '$' '(' selector_expression ')'

  option_propagator ::= @( '?' ) | or_block

  or_block ::= 'or' block

  _expression_with_blocks ::= if_expression
	| match_expression
	| select_expression
	| sql_expression
	| lock_expression
	| unsafe_expression
	| comptime_if_expression

  _single_line_expression ::=  <1(  pseudo_comptime_identifier | type_selector_expression | none | true | false )

  comment ::= _comment

  escape_sequence ::= @(  1(  '\\'  ( /u[a-fA-F\d]{4}/ | /U[a-fA-F\d]{8}/ | /x[a-fA-F\d]{2}/ | /\d{3}/ | /\r?\n/ | /['"abfrntv\$\\]/ | /\S/ ) )  )

  none ::= 'none'

  true ::= 'true'

  false ::= 'false'

  spread_operator ::=  >6(  '...' _expression )

  type_initializer ::=  -1(  ( builtin_type | type_identifier | type_placeholder | generic_type | _binded_type | qualified_type | pointer_type | array_type | fixed_array_type | map_type | channel_type ):type ( literal_value ):body )

  literal_value ::= '{' ( ( ( spread_operator | keyed_element ) ( ',' | '\n'  | '\r'  | '\r\n' )? )* | element ( ',' element )* )? '}'

  element ::= _expression

  keyed_element ::= ( _element_key ):name ':' ( _expression ):value

  _element_key ::=  1(  _field_identifier )
	| type_identifier
	| _string_literal
	| int_literal
	| call_expression
	| selector_expression
	| type_selector_expression
	| index_expression

  map ::=  -1(  '{' ( keyed_element ( ',' | '\n'  | '\r'  | '\r\n' )? )+ '}' )

  array ::=  >-1(  _non_empty_array )

  fixed_array ::=  >-1(  _non_empty_array '!' )

  _non_empty_array ::= '[' ( _expression ','? )* ']'

  fixed_array_type ::= '[' ( int_literal | identifier ):size ']' ( _simple_type ):element

  array_type ::=  1(  '[' ']' ( _simple_type ):element )

  variadic_type ::= '...' _simple_type

  pointer_type ::=  6(  '&' _simple_type )

  map_type ::= 'map[' ( _simple_type ):key ']' ( _type ):value

  channel_type ::=  >7(  'chan' ( _simple_type ):value )

  shared_type ::= 'shared' _simple_type

  thread_type ::= 'thread' _simple_type

  int_literal ::= @( '0' ( 'b' | 'B' ) '_'? /[01]/ ( '_'? /[01]/ )* | '0' | /[1-9]/ ( '_'? /[0-9]/ ( '_'? /[0-9]/ )* )? | '0' ( 'o' | 'O' )? '_'? /[0-7]/ ( '_'? /[0-7]/ )* | '0' ( 'x' | 'X' ) '_'? /[0-9a-fA-F]/ ( '_'? /[0-9a-fA-F]/ )* )

  float_literal ::= @( /[0-9]/ ( '_'? /[0-9]/ )* '.' /[0-9]/ ( '_'? /[0-9]/ )* ( ( 'e' | 'E' ) ( '+' | '-' )? /[0-9]/ ( '_'? /[0-9]/ )* )? | /[0-9]/ ( '_'? /[0-9]/ )* ( 'e' | 'E' ) ( '+' | '-' )? /[0-9]/ ( '_'? /[0-9]/ )* | '.' /[0-9]/ ( '_'? /[0-9]/ )* ( ( 'e' | 'E' ) ( '+' | '-' )? /[0-9]/ ( '_'? /[0-9]/ )* )? | '0' ( 'x' | 'X' ) ( '_'? /[0-9a-fA-F]/ ( '_'? /[0-9a-fA-F]/ )* '.' ( /[0-9a-fA-F]/ ( '_'? /[0-9a-fA-F]/ )* )? | '_'? /[0-9a-fA-F]/ ( '_'? /[0-9a-fA-F]/ )* | '.' /[0-9a-fA-F]/ ( '_'? /[0-9a-fA-F]/ )* ) ( 'p' | 'P' ) ( '+' | '-' )? /[0-9]/ ( '_'? /[0-9]/ )* )

  rune_literal ::= @( '`' ( /[^'\\]/ | "'"  | '"'  | '\\'  ( '0' | '`' | 'x' /[0-9a-fA-F]/ /[0-9a-fA-F]/ | /[0-7]/ /[0-7]/ /[0-7]/ | 'u' /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ | 'U' /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ /[0-9a-fA-F]/ | ( 'a' | 'b' | 'e' | 'f' | 'n' | 'r' | 't' | 'v' | '\\'  | "'"  | '"'  ) ) ) '`' )

  _string_literal ::= c_string_literal
	| raw_string_literal
	| interpreted_string_literal

  c_string_literal ::=  1(  _c_string_opening )  (  1(  _string_content )  | escape_sequence | string_interpolation | !( '$' ) )* _string_closing

  raw_string_literal ::=  1(  _raw_string_opening )  (  1(  _string_content )  )* _string_closing

  interpreted_string_literal ::=  1(  _string_opening )  (  1(  _string_content )  | escape_sequence | string_interpolation | !( '$' ) )* _string_closing

  string_interpolation ::= _braced_interpolation_opening _expression format_specifier? _interpolation_closing
	| _unbraced_interpolation_opening ( identifier | selector_expression )

  format_specifier ::= @( ':' ) ( @( /[gGeEfFcdoxXpsSc]/ ) | @( /[+-0]/ )? int_literal ( '.' int_literal )? @( /[gGeEfFcdoxXpsSc]/ )? )

  _reserved_identifier ::= ( 'array' | 'string' | 'char' | 'sql' ) -> "identifier"

  identifier ::= @( ( /[a-zα-ωµ]/ | '_' ) ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' | /[0-9]/ )* | '@' ( !( 'pub' ) | !( 'none' ) | !( 'const' ) | !( 'mut' ) | !( '__global' ) | !( 'fn' ) | !( 'assert' ) | !( 'as' ) | !( 'go' ) | !( 'asm' ) | !( 'return' ) | !( 'type' ) | !( 'if' ) | !( 'else' ) | !( 'for' ) | !( 'in' ) | !( 'is' ) | !( 'union' ) | !( 'struct' ) | !( 'enum' ) | !( 'interface' ) | !( 'defer' ) | !( 'unsafe' ) | !( 'import' ) | !( 'match' ) | !( 'lock' ) | !( 'rlock' ) | !( 'select' ) | !( 'voidptr' ) | !( 'byteptr' ) | !( 'charptr' ) | !( 'i8' ) | !( 'i16' ) | !( 'i32' ) | !( 'int' ) | !( 'i64' ) | !( 'byte' ) | !( 'u8' ) | !( 'u16' ) | !( 'u32' ) | !( 'u64' ) | !( 'f32' ) | !( 'f64' ) | !( 'char' ) | !( 'bool' ) | !( 'string' ) | !( 'rune' ) | !( 'array' ) | !( 'map' ) | !( 'mapnode' ) | !( 'chan' ) | !( 'size_t' ) | !( 'usize' ) | !( 'isize' ) | !( 'float_literal' ) | !( 'int_literal' ) | !( 'thread' ) | !( 'IError' ) ) )

  immediate_identifier ::= !( ( /[a-zα-ωµ]/ ) ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' | /[0-9]/ | '_' )* )

  _old_identifier ::= @( ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' ) ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' | /[0-9]/ )* )

  _mutable_prefix ::= 'mut' 'static'? | 'shared'

  mutable_identifier ::=  1(  _mutable_prefix ( identifier | _reserved_identifier ) )

  _mutable_expression_2 ::=  1(  _mutable_prefix ( selector_expression | index_expression ) )

  mutable_expression ::=  1(  _mutable_prefix _expression )

  binded_identifier ::= ( 'C' | 'JS' ):language !( '.' ) ( identifier | _old_identifier -> "identifier" ):name

  identifier_list ::=  2(  ( mutable_identifier | identifier | _reserved_identifier ) ( ',' ( mutable_identifier | identifier | _reserved_identifier ) )* )

  expression_list ::=  1(  ( _expression | mutable_expression ) ( ',' ( _expression | mutable_expression ) )* )

  _expression_list_repeat1 ::= ( _expression | mutable_expression ) ( ',' ( _expression | mutable_expression ) )+

  parameter_declaration ::= ( mutable_identifier | identifier | _reserved_identifier ):name ( _simple_type | option_type | variadic_type ):type

  parameter_list ::=  1(  '(' ( parameter_declaration ( ',' parameter_declaration )* )? ')' )

  empty_literal_value ::=  -1(  '{' '}' )

  argument_list ::= '(' ( ( _expression | mutable_expression | keyed_element | spread_operator ) ( ( ',' | _automatic_separator ) ( _expression | mutable_expression | keyed_element | spread_operator ) )* _automatic_separator? )? ')'

  _type ::= _simple_type
	| option_type
	| multi_return_type

  option_type ::= '?' ( _simple_type | multi_return_type )?

  multi_return_type ::= '(' _simple_type ( ',' _simple_type )* ')'

  type_list ::= _simple_type ( ',' _simple_type )*

  _simple_type ::= builtin_type
	| type_identifier
	| type_placeholder
	| _binded_type
	| qualified_type
	| pointer_type
	| array_type
	| fixed_array_type
	| function_type
	| generic_type
	| map_type
	| channel_type
	| shared_type
	| thread_type

  type_parameters ::=  1(  !( '<' ) _simple_type ( ',' _simple_type )* !( '>' ) )

  builtin_type ::=  >1(  'voidptr' | 'byteptr' | 'charptr' | 'i8' | 'i16' | 'i32' | 'int' | 'i64' | 'byte' | 'u8' | 'u16' | 'u32' | 'u64' | 'f32' | 'f64' | 'char' | 'bool' | 'string' | 'rune' | 'array' | 'map' | 'mapnode' | 'chan' | 'size_t' | 'usize' | 'isize' | 'float_literal' | 'int_literal' | 'thread' | 'IError' )

  _binded_type ::= binded_identifier -> "binded_type"

  generic_type ::= ( qualified_type | type_identifier ) type_parameters

  qualified_type ::= ( _module_identifier ):module '.' ( type_identifier ):name

  type_placeholder ::= @( /[A-ZΑ-Ω]/ )

  pseudo_comptime_identifier ::= '@' /[A-Z][A-Z0-9_]+/ -> "identifier"

  type_identifier ::= @( /[A-ZΑ-Ω]/ ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' | /[0-9]/ )+ )

  _module_identifier ::= identifier -> "module_identifier"

  _field_identifier ::= identifier -> "field_identifier"

  _statement_list ::= ( _statement _automatic_separator? )+

  _statement ::= _simple_statement
	| assert_statement
	| continue_statement
	| break_statement
	| return_statement
	| asm_statement
	| go_statement
	| goto_statement
	| labeled_statement
	| defer_statement
	| for_statement
	| comptime_for_statement
	| send_statement
	| block
	| hash_statement

  _simple_statement ::= _expression
	| inc_statement
	| dec_statement
	| assignment_statement
	| short_var_declaration

  inc_statement ::= _expression '++'

  dec_statement ::= _expression '--'

  send_statement ::=  6(  ( _expression ):channel '<-' ( _expression ):value )

  short_var_declaration ::= ( expression_list ):left ':=' ( expression_list ):right

  assignment_statement ::= ( expression_list ):left ( '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '&^=' | '+=' | '-=' | '|=' | '^=' | '=' ):operator ( expression_list ):right

  assert_statement ::= 'assert' _expression

  block ::= '{' ( _statement_list | _expression_list_repeat1 -> "expression_list" | empty_labeled_statement -> "labeled_statement" | _statement_list ( _expression_list_repeat1 -> "expression_list" | empty_labeled_statement -> "labeled_statement" ) )? '}'

  defer_statement ::= 'defer' block

  unsafe_expression ::= 'unsafe' block

  overloadable_operator ::= @( '+' )
	| @( '-' )
	| @( '*' )
	| @( '/' )
	| @( '%' )
	| @( '<' )
	| @( '>' )
	| @( '==' )
	| @( '!=' )
	| @( '<=' )
	| @( '>=' )

  exposed_variables_list ::= '[' expression_list ']'

  function_declaration ::= ( attribute_list )?:attributes 'pub'? 'fn' ( parameter_list )?:receiver ( exposed_variables_list )?:exposed_variables ( binded_identifier | identifier | overloadable_operator ):name ( type_parameters )?:type_parameters ( parameter_list | type_only_parameter_list ):parameters ( _type )?:result ( block )?:body

  function_type ::= 'fn' ( parameter_list | type_only_parameter_list ):parameters ( _type )?:result

  type_only_parameter_list ::= '(' ( type_parameter_declaration ( ',' type_parameter_declaration )* )? ')'

  type_parameter_declaration ::= 'mut'? ( _simple_type | option_type | variadic_type ):type

  fn_literal ::= 'fn' ( exposed_variables_list )?:exposed_variables ( parameter_list ):parameters ( _type )?:result ( block ):body ( argument_list )?:arguments

  global_var_declaration ::= '__global' ( _global_var_spec | global_var_type_initializer | '(' ( ( _global_var_spec | global_var_type_initializer ) ( '\n'  | '\r'  | '\r\n' ) )* ')' )

  _global_var_spec ::= const_spec -> "global_var_spec"

  global_var_type_initializer ::= ( identifier ):name ( _type ):type

  const_declaration ::= 'pub'? 'const' ( const_spec | '(' ( const_spec ( '\n'  | '\r'  | '\r\n' ) )+ ')' )

  const_spec ::= ( identifier | _old_identifier -> "identifier" ):name '=' ( _expression ):value

  asm_statement ::= 'asm' identifier _content_block

  sql_expression ::=  1(  'sql' identifier? _content_block )

  _content_block ::= '{' !(  1(  /[^{}]+/ )  ) '}'

  break_statement ::= 'break' identifier -> "label_name"?

  continue_statement ::= 'continue' identifier -> "label_name"?

  return_statement ::= 'return' expression_list?

  type_declaration ::= 'pub'? 'type' ( type_identifier | builtin_type ):name ( type_parameters )?:type_parameters '=' ( sum_type_list -> "type_list" ):types

  sum_type_list ::= _simple_type ( '|' _simple_type )*

  go_statement ::= 'go' _expression

  goto_statement ::= 'goto' identifier -> "label_name"

  labeled_statement ::= ( identifier -> "label_name" ):label ':' _statement

  empty_labeled_statement ::= ( identifier -> "label_name" ):label ':'

  for_statement ::= 'for' ( for_in_operator | cstyle_for_clause | _expression )? ( block ):body

  comptime_for_statement ::= '_for' for_in_operator ( block ):body

  for_in_operator ::=  <7(  ( _expression | identifier_list ):left 'in' ( _definite_range -> "range" | _expression ):right )

  _definite_range ::=  5(  ( _expression ):start ( '..' | '...' ) ( _expression ):end )

  _range ::=  5(  ( _expression )?:start '..' ( _expression )?:end )

  selector_expression ::=  7(  ( _expression | comptime_identifier ):operand '.' ( identifier | type_identifier | type_placeholder -> "type_identifier" | _reserved_identifier | comptime_identifier | comptime_selector_expression ):field )

  index_expression ::=  >7(  ( _expression ):operand '[' ( _expression ):index ']' option_propagator? )

  slice_expression ::=  7(  ( _expression ):operand '[' _range ']' )

  cstyle_for_clause ::= ( _simple_statement )?:initializer ';' ( _expression )?:condition ';' ( _simple_statement )?:update

  comptime_if_expression ::= '_if' ( _expression '?'? ):condition ( block ):consequence ( '_else' ( block | comptime_if_expression ):alternative )?

  if_expression ::= 'if' ( ( _expression ):condition | ( short_var_declaration ):initializer ) ( block ):consequence ( 'else' ( block | if_expression ):alternative )?

  is_expression ::=  <3(  ( type_placeholder | mutable_identifier | _mutable_expression_2 -> "mutable_expression" | mutable_expression | _expression ):left ( 'is' | '!is' ) ( option_type | _simple_type | none ):right )

  attribute_spec ::=  8(  'if' identifier '?'? | 'unsafe' -> "identifier" | identifier | interpreted_string_literal | ( 'unsafe' -> "identifier" | identifier ):name ':' ( _string_literal | identifier ):value )

  attribute_declaration ::= '[' attribute_spec ( ';' attribute_spec )* ']'

  attribute_list ::= ( attribute_declaration ( '\n'  | '\r'  | '\r\n' )? )+

  struct_declaration ::= ( attribute_list )?:attributes 'pub'? ( 'struct' | 'union' ) (  ~-1(  type_identifier | builtin_type | generic_type )  ):name struct_field_declaration_list

  struct_field_declaration_list ::= '{' ( ( struct_field_scope | struct_field_declaration ) ( '\n'  | '\r'  | '\r\n' )? )* '}'

  struct_field_scope ::= ( 'pub' | 'mut' | 'pub' 'mut' | '__global' ) !( ':' )

  struct_field_declaration ::= ( _field_identifier ):name ( _simple_type | option_type ):type ( attribute_declaration )?:attributes ( '=' ( _expression ):default_value )? ( '\n'  | '\r'  | '\r\n' )? | ( ( type_identifier | qualified_type ) ( '\n'  | '\r'  | '\r\n' )? ):type

  _binded_struct_declaration ::= ( attribute_list )?:attributes 'pub'? ( 'struct' | 'union' ) (  ~-1(  _binded_type )  ):name _binded_struct_field_declaration_list -> "struct_field_declaration_list"

  _binded_struct_field_declaration_list ::= '{' ( ( struct_field_scope | _binded_struct_field_declaration -> "struct_field_declaration" ) ( '\n'  | '\r'  | '\r\n' )? )* '}'

  _binded_struct_field_declaration ::= ( _field_identifier | _old_identifier -> "field_identifier" ):name ( _simple_type | option_type ):type ( attribute_declaration )?:attributes ( '=' ( _expression ):default_value )? ( '\n'  | '\r'  | '\r\n' )?

  enum_declaration ::= attribute_list? 'pub'? 'enum' ( type_identifier ):name enum_member_declaration_list

  enum_member_declaration_list ::= '{' ( ( enum_member ( '\n'  | '\r'  | '\r\n' )? )* )? '}'

  enum_member ::= ( identifier ):name ( '=' ( _expression ):value )?

  type_selector_expression ::= ( type_placeholder | type_identifier )?:type '.' ( _reserved_identifier | identifier ):field_name

  interface_declaration ::= ( attribute_list )?:attributes 'pub'? 'interface' ( type_identifier | generic_type ):name interface_spec_list

  interface_spec_list ::= '{' ( ( struct_field_declaration | interface_spec | interface_field_scope ) ( '\n'  | '\r'  | '\r\n' )? )*? '}'

  interface_field_scope ::= 'mut' !( ':' )

  interface_spec ::= ( _field_identifier ):name ( parameter_list | type_only_parameter_list ):parameters ( _type )?:result

  hash_statement ::= '#' !( /.|\\\r?\n/+ ) ( '\n'  | '\r'  | '\r\n' )

  module_clause ::= ( attribute_list )?:attributes 'module' ' ' immediate_identifier -> "module_identifier"

  import_declaration ::=  >1(  'import' ' ' ( import_path ):path ( ' ' ( ( import_alias ):alias | ( import_symbols ):symbols ) )? )

  import_path ::= !( ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' ) ( /[a-zA-Zα-ωΑ-Ωµ]/ | '_' | /[0-9]/ | '.' )* )

  import_symbols ::= !( '{' ) import_symbols_list '}'

  import_symbols_list ::= ( identifier | type_identifier -> "identifier" ) ( ',' ( identifier | type_identifier -> "identifier" ) )*

  import_alias ::= 'as' ' ' ( immediate_identifier -> "module_identifier" ):name

  match_expression ::= 'match' ( _expression | mutable_expression ):condition '{' expression_case* default_case? '}'

  case_list ::= ( _expression | _simple_type | _definite_range -> "range" ) ( ',' ( _expression | _simple_type | _definite_range -> "range" ) )*

  expression_case ::= ( case_list ):value ( block ):consequence

  default_case ::= 'else' ( block ):consequence

  select_expression ::= 'select' ( expression_list )?:selected_variables '{' select_branch* select_default_branch? '}'

  select_branch ::= ( short_var_declaration ) block

  select_default_branch ::= (  7(  '>'? _expression )  | 'else' ) block

  lock_expression ::= ( 'lock' | 'rlock' ) ( expression_list )?:locked_variables ( block ):body
